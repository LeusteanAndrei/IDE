Temporary file created: C:\Users\Luca\AppData\Local\Temp\tmpte12azwn.cpp
LSP process started successfully.
Request sent with method initialize
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpte12azwn.cpp
LSP process shut down successfully.
Temporary file created: C:\Users\Luca\AppData\Local\Temp\tmpi9hxxccf.cpp
LSP process started successfully.
Request sent with method initialize
Handling response from LSP
Received response: {
    "id": 0,
    "jsonrpc": "2.0",
    "result": {
        "capabilities": {
            "astProvider": true,
            "callHierarchyProvider": true,
            "clangdInlayHintsProvider": true,
            "codeActionProvider": true,
            "compilationDatabase": {
                "automaticReload": true
            },
            "completionProvider": {
                "resolveProvider": false,
                "triggerCharacters": [
                    ".",
                    "<",
                    ">",
                    ":",
                    "\"",
                    "/",
                    "*"
                ]
            },
            "declarationProvider": true,
            "definitionProvider": true,
            "documentFormattingProvider": true,
            "documentHighlightProvider": true,
            "documentLinkProvider": {
                "resolveProvider": false
            },
            "documentOnTypeFormattingProvider": {
                "firstTriggerCharacter": "\n",
                "moreTriggerCharacter": []
            },
            "documentRangeFormattingProvider": true,
            "documentSymbolProvider": true,
            "executeCommandProvider": {
                "commands": [
                    "clangd.applyFix",
                    "clangd.applyRename",
                    "clangd.applyTweak"
                ]
            },
            "foldingRangeProvider": true,
            "hoverProvider": true,
            "implementationProvider": true,
            "inactiveRegionsProvider": true,
            "inlayHintProvider": true,
            "memoryUsageProvider": true,
            "referencesProvider": true,
            "renameProvider": true,
            "selectionRangeProvider": true,
            "semanticTokensProvider": {
                "full": {
                    "delta": true
                },
                "legend": {
                    "tokenModifiers": [
                        "declaration",
                        "definition",
                        "deprecated",
                        "deduced",
                        "readonly",
                        "static",
                        "abstract",
                        "virtual",
                        "dependentName",
                        "defaultLibrary",
                        "usedAsMutableReference",
                        "usedAsMutablePointer",
                        "constructorOrDestructor",
                        "userDefined",
                        "functionScope",
                        "classScope",
                        "fileScope",
                        "globalScope"
                    ],
                    "tokenTypes": [
                        "variable",
                        "variable",
                        "parameter",
                        "function",
                        "method",
                        "function",
                        "property",
                        "variable",
                        "class",
                        "interface",
                        "enum",
                        "enumMember",
                        "type",
                        "type",
                        "unknown",
                        "namespace",
                        "typeParameter",
                        "concept",
                        "type",
                        "macro",
                        "modifier",
                        "operator",
                        "bracket",
                        "label",
                        "comment"
                    ]
                },
                "range": false
            },
            "signatureHelpProvider": {
                "triggerCharacters": [
                    "(",
                    ")",
                    "{",
                    "}",
                    "<",
                    ">",
                    ","
                ]
            },
            "standardTypeHierarchyProvider": true,
            "textDocumentSync": {
                "change": 2,
                "openClose": true,
                "save": true
            },
            "typeDefinitionProvider": true,
            "typeHierarchyProvider": true,
            "workspaceSymbolProvider": true
        },
        "serverInfo": {
            "name": "clangd",
            "version": "clangd version 20.1.0 windows x86_64-pc-windows-msvc"
        }
    }
}
LSP initialized successfully.
Request sent with method textDocument/didOpen
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpi9hxxccf.cpp",
        "version": 0
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpi9hxxccf.cpp
LSP process shut down successfully.
Temporary file created: C:\Users\Luca\AppData\Local\Temp\tmpxlkhlwk_.cpp
LSP process started successfully.
Request sent with method initialize
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpxlkhlwk_.cpp
LSP process shut down successfully.
Temporary file created: C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
LSP process started successfully.
Request sent with method initialize
Handling response from LSP
Received response: {
    "id": 0,
    "jsonrpc": "2.0",
    "result": {
        "capabilities": {
            "astProvider": true,
            "callHierarchyProvider": true,
            "clangdInlayHintsProvider": true,
            "codeActionProvider": true,
            "compilationDatabase": {
                "automaticReload": true
            },
            "completionProvider": {
                "resolveProvider": false,
                "triggerCharacters": [
                    ".",
                    "<",
                    ">",
                    ":",
                    "\"",
                    "/",
                    "*"
                ]
            },
            "declarationProvider": true,
            "definitionProvider": true,
            "documentFormattingProvider": true,
            "documentHighlightProvider": true,
            "documentLinkProvider": {
                "resolveProvider": false
            },
            "documentOnTypeFormattingProvider": {
                "firstTriggerCharacter": "\n",
                "moreTriggerCharacter": []
            },
            "documentRangeFormattingProvider": true,
            "documentSymbolProvider": true,
            "executeCommandProvider": {
                "commands": [
                    "clangd.applyFix",
                    "clangd.applyRename",
                    "clangd.applyTweak"
                ]
            },
            "foldingRangeProvider": true,
            "hoverProvider": true,
            "implementationProvider": true,
            "inactiveRegionsProvider": true,
            "inlayHintProvider": true,
            "memoryUsageProvider": true,
            "referencesProvider": true,
            "renameProvider": true,
            "selectionRangeProvider": true,
            "semanticTokensProvider": {
                "full": {
                    "delta": true
                },
                "legend": {
                    "tokenModifiers": [
                        "declaration",
                        "definition",
                        "deprecated",
                        "deduced",
                        "readonly",
                        "static",
                        "abstract",
                        "virtual",
                        "dependentName",
                        "defaultLibrary",
                        "usedAsMutableReference",
                        "usedAsMutablePointer",
                        "constructorOrDestructor",
                        "userDefined",
                        "functionScope",
                        "classScope",
                        "fileScope",
                        "globalScope"
                    ],
                    "tokenTypes": [
                        "variable",
                        "variable",
                        "parameter",
                        "function",
                        "method",
                        "function",
                        "property",
                        "variable",
                        "class",
                        "interface",
                        "enum",
                        "enumMember",
                        "type",
                        "type",
                        "unknown",
                        "namespace",
                        "typeParameter",
                        "concept",
                        "type",
                        "macro",
                        "modifier",
                        "operator",
                        "bracket",
                        "label",
                        "comment"
                    ]
                },
                "range": false
            },
            "signatureHelpProvider": {
                "triggerCharacters": [
                    "(",
                    ")",
                    "{",
                    "}",
                    "<",
                    ">",
                    ","
                ]
            },
            "standardTypeHierarchyProvider": true,
            "textDocumentSync": {
                "change": 2,
                "openClose": true,
                "save": true
            },
            "typeDefinitionProvider": true,
            "typeHierarchyProvider": true,
            "workspaceSymbolProvider": true
        },
        "serverInfo": {
            "name": "clangd",
            "version": "clangd version 20.1.0 windows x86_64-pc-windows-msvc"
        }
    }
}
LSP initialized successfully.
Request sent with method textDocument/didOpen
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 0
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 2
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 3.833096742630005,
                "sortText": "3f8aae8binteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 3.833096742630005,
                "sortText": "3f8aae8binteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 2.948925256729126,
                "sortText": "3fc344cfx",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.9800145626068115,
                "sortText": "40851dc4SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.73712557554245,
                "sortText": "40c34bbd_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.73712557554245,
                "sortText": "40c34bbdtype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_argv_mode",
                "insertText": "_crt_argv_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_argv_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_argv_mode",
                "textEdit": {
                    "newText": "_crt_argv_mode",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "align",
                "insertText": "align",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022align(size_t Bound, size_t Size, void *&Ptr, size_t &Space)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddalign",
                "textEdit": {
                    "newText": "align",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "notify_all_at_thread_exit",
                "insertText": "notify_all_at_thread_exit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022notify_all_at_thread_exit(condition_variable &Cnd, unique_lock<mutex> Lck)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddnotify_all_at_thread_exit",
                "textEdit": {
                    "newText": "notify_all_at_thread_exit",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const allocator<Ty> &, const allocator<Other> &)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const allocator<Ty> &, const allocator<Other> &)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "return_temporary_buffer",
                "insertText": "return_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022return_temporary_buffer(Ty *Pbuf)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddreturn_temporary_buffer",
                "textEdit": {
                    "newText": "return_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_fill",
                "insertText": "uninitialized_fill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_fill(const NoThrowFwdIt First, const NoThrowFwdIt Last, const Tval &Val)",
                "score": 0.5893728137016296,
                "sortText": "40e91edduninitialized_fill",
                "textEdit": {
                    "newText": "uninitialized_fill",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "pair<Ty *, ptrdiff_t>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "get_temporary_buffer",
                "insertText": "get_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_temporary_buffer<class Ty>(ptrdiff_t Count)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464get_temporary_buffer",
                "textEdit": {
                    "newText": "get_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove",
                "insertText": "remove",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove(FwdIt First, const FwdIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464remove",
                "textEdit": {
                    "newText": "remove",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove_if",
                "insertText": "remove_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove_if(FwdIt First, const FwdIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464remove_if",
                "textEdit": {
                    "newText": "remove_if",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "NoThrowFwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_copy",
                "insertText": "uninitialized_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_copy(const InIt First, const InIt Last, NoThrowFwdIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464uninitialized_copy",
                "textEdit": {
                    "newText": "uninitialized_copy",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_crt_argv_mode",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_get_startup_argv_mode",
                "insertText": "_get_startup_argv_mode",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_startup_argv_mode()",
                "score": 0.5127986073493958,
                "sortText": "40fcb93b_get_startup_argv_mode",
                "textEdit": {
                    "newText": "_get_startup_argv_mode",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_ADAPTOR_EMPLACE_RETURN",
                "insertText": "_ADAPTOR_EMPLACE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ADAPTOR_EMPLACE_RETURN",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_ADAPTOR_EMPLACE_RETURN",
                "textEdit": {
                    "newText": "_ADAPTOR_EMPLACE_RETURN",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCINFO",
                "insertText": "_BEGIN_LOCINFO",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCINFO(_VarName)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_BEGIN_LOCINFO",
                "textEdit": {
                    "newText": "_BEGIN_LOCINFO",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCK",
                "insertText": "_BEGIN_LOCK",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCK(_Kind)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_BEGIN_LOCK",
                "textEdit": {
                    "newText": "_BEGIN_LOCK",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH",
                "insertText": "_CATCH",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_CATCH(x)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH",
                "textEdit": {
                    "newText": "_CATCH",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_ALL",
                "insertText": "_CATCH_ALL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_ALL",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH_ALL",
                "textEdit": {
                    "newText": "_CATCH_ALL",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_END",
                "insertText": "_CATCH_END",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_END",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH_END",
                "textEdit": {
                    "newText": "_CATCH_END",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_CLANG_CONSTEXPR20",
                "insertText": "_CLANG_CONSTEXPR20",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CLANG_CONSTEXPR20",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CLANG_CONSTEXPR20",
                "textEdit": {
                    "newText": "_CLANG_CONSTEXPR20",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'c'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 12
                    },
                    "start": {
                        "character": 0,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 4
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=0, column_end = 1, message=Unknown type name 'c')]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "chrono",
                "insertText": "chrono",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono",
                "textEdit": {
                    "newText": "chrono",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT1",
                "insertText": "CSALCAT1",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT1(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT1",
                "textEdit": {
                    "newText": "CSALCAT1",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT2",
                "insertText": "CSALCAT2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT2(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT2",
                "textEdit": {
                    "newText": "CSALCAT2",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "CLK_TCK",
                "insertText": "CLK_TCK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLK_TCK",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLK_TCK",
                "textEdit": {
                    "newText": "CLK_TCK",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "CLOCKS_PER_SEC",
                "insertText": "CLOCKS_PER_SEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLOCKS_PER_SEC",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLOCKS_PER_SEC",
                "textEdit": {
                    "newText": "CLOCKS_PER_SEC",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "CW_DEFAULT",
                "insertText": "CW_DEFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CW_DEFAULT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CW_DEFAULT",
                "textEdit": {
                    "newText": "CW_DEFAULT",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "clear87",
                "insertText": "clear87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022clear87",
                "score": 0.8436345458030701,
                "sortText": "40a80791clear87",
                "textEdit": {
                    "newText": "clear87",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "cv_status",
                "insertText": "cv_status",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022cv_status",
                "score": 0.8070572018623352,
                "sortText": "40b164b3cv_status",
                "textEdit": {
                    "newText": "cv_status",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddcall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nTypes\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022clock_t",
                "score": 0.5684974789619446,
                "sortText": "40ee76f3clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "CaptureCallstack",
                "insertText": "Concurrency::details::platform::CaptureCallstack",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::platform::CaptureCallstack(void **, size_t, size_t)",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dCaptureCallstack",
                "textEdit": {
                    "newText": "Concurrency::details::platform::CaptureCallstack",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Cancels the currently executing task. This function can be called from within the body of a task to abort the task's execution and cause it to enter the <c>canceled</c> state. While it may be used in response to a cancellation request through a <c>cancellation_token</c>, you may also use it by itself, to initiate cancellation of the task that is currently executing.\n<para>It is not a supported scenario to call this function if you are not within the body of a <c>task</c>.\nDoing so will result in undefined behavior such as a crash or a hang in your application.</para> </summary> <seealso cref=\"task Class\"/>"
                },
                "filterText": "cancel_current_task",
                "insertText": "Concurrency::cancel_current_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::cancel_current_task()",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dcancel_current_task",
                "textEdit": {
                    "newText": "Concurrency::cancel_current_task",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nNo modf(), types must match"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\n3-arg hypot() is hand-crafted"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<typename details::_TaskTypeFromParam<Ty>::_Type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(Ty Param, task_options TaskOptions = task_options())",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<ReturnType>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <param name=\"_Token\"> The cancellation token to associate with the task. When the source for this token is canceled, cancellation will be requested on the task.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(const task<ReturnType> &Task)",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "To",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const duration<Rep, Period> &Dur)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "time_point<Clock, To>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const time_point<Clock, Duration> &Time)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.45782190561294556,
                "sortText": "4115985ecerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4115985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.45782190561294556,
                "sortText": "4115985eclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4115985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c16rtomb",
                "insertText": "c16rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c16rtomb(char *S, char16_t C16, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc16rtomb",
                "textEdit": {
                    "newText": "c16rtomb",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c32rtomb",
                "insertText": "c32rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c32rtomb(char *S, char32_t C32, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc32rtomb",
                "textEdit": {
                    "newText": "c32rtomb",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "clock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clock()",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "ctime_s",
                "insertText": "ctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime_s(char *const Buffer, const size_t SizeInBytes, const time_t *const Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbctime_s",
                "textEdit": {
                    "newText": "ctime_s",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "ctime",
                "insertText": "ctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime(const time_t *const Time)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35ctime",
                "textEdit": {
                    "newText": "ctime",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The <c>task_group</c> or <c>structured_task_group</c> object was canceled. One or more tasks may not have executed.\n</summary>"
                },
                "filterText": "canceled",
                "insertText": "Concurrency::canceled",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::canceled",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecanceled",
                "textEdit": {
                    "newText": "Concurrency::canceled",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEXDEV"
                },
                "filterText": "cross_device_link",
                "insertText": "errc::cross_device_link",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::cross_device_link",
                "score": 0.3138078451156616,
                "sortText": "415f5494cross_device_link",
                "textEdit": {
                    "newText": "errc::cross_device_link",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrt",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtf",
                "insertText": "cbrtf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtf",
                "textEdit": {
                    "newText": "cbrtf",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtl",
                "insertText": "cbrtl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtl",
                "textEdit": {
                    "newText": "cbrtl",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceil",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceilf",
                "insertText": "ceilf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceilf",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceilf",
                "textEdit": {
                    "newText": "ceilf",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceill",
                "insertText": "ceill",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceill",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceill",
                "textEdit": {
                    "newText": "ceill",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'ci'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 12
                    },
                    "start": {
                        "character": 0,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 6
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=0, column_end = 2, message=Unknown type name 'ci')]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "cregex_iterator",
                "insertText": "cregex_iterator",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022cregex_iterator",
                "score": 0.8070572018623352,
                "sortText": "40e50b86cregex_iterator",
                "textEdit": {
                    "newText": "cregex_iterator",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4115985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41232696copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41232696count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "cregex_iterator",
                "insertText": "tr1::cregex_iterator",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::cregex_iterator",
                "score": 0.2698061466217041,
                "sortText": "41b0c9f4cregex_iterator",
                "textEdit": {
                    "newText": "tr1::cregex_iterator",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove_copy_if",
                "insertText": "remove_copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove_copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "426cc464remove_copy_if",
                "textEdit": {
                    "newText": "remove_copy_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "replace_copy_if",
                "insertText": "replace_copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022replace_copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "426cc464replace_copy_if",
                "textEdit": {
                    "newText": "replace_copy_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvtsh_i32",
                "insertText": "_mm_cvtsh_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvtsh_i32(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvtsh_i32",
                "textEdit": {
                    "newText": "_mm_cvtsh_i32",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvtsh_i64",
                "insertText": "_mm_cvtsh_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvtsh_i64(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvtsh_i64",
                "textEdit": {
                    "newText": "_mm_cvtsh_i64",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsd_i32",
                "insertText": "_mm_cvttsd_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsd_i32(__m128d A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsd_i32",
                "textEdit": {
                    "newText": "_mm_cvttsd_i32",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsd_i64",
                "insertText": "_mm_cvttsd_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsd_i64(__m128d A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsd_i64",
                "textEdit": {
                    "newText": "_mm_cvttsd_i64",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsh_i32",
                "insertText": "_mm_cvttsh_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsh_i32(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsh_i32",
                "textEdit": {
                    "newText": "_mm_cvttsh_i32",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsh_i64",
                "insertText": "_mm_cvttsh_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsh_i64(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsh_i64",
                "textEdit": {
                    "newText": "_mm_cvttsh_i64",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttss_i32",
                "insertText": "_mm_cvttss_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttss_i32(__m128 A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttss_i32",
                "textEdit": {
                    "newText": "_mm_cvttss_i32",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttss_i64",
                "insertText": "_mm_cvttss_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttss_i64(__m128 A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttss_i64",
                "textEdit": {
                    "newText": "_mm_cvttss_i64",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmimfp16ps_internal",
                "insertText": "_tile_cmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmrlfp16ps_internal",
                "insertText": "_tile_cmmrlfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmrlfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cmmrlfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmrlfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtcmmimfp16ps_internal",
                "insertText": "_tile_conjtcmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtcmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_conjtcmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_conjtcmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtfp16_internal",
                "insertText": "_tile_conjtfp16_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtfp16_internal(unsigned short m, unsigned short n, _tile1024i src)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_conjtfp16_internal",
                "textEdit": {
                    "newText": "_tile_conjtfp16_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nThis is internal intrinsic. C/C++ user should avoid calling it directly."
                },
                "filterText": "_tile_cvtrowd2ps_internal",
                "insertText": "_tile_cvtrowd2ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowd2ps_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowd2ps_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowd2ps_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16h_internal",
                "insertText": "_tile_cvtrowps2bf16h_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16h_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2bf16h_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16h_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16l_internal",
                "insertText": "_tile_cvtrowps2bf16l_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16l_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2bf16l_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16l_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phh_internal",
                "insertText": "_tile_cvtrowps2phh_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phh_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2phh_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phh_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phl_internal",
                "insertText": "_tile_cvtrowps2phl_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phl_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2phl_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phl_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 13
                    },
                    "start": {
                        "character": 4,
                        "line": 13
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 3,
                        "line": 12
                    },
                    "start": {
                        "character": 0,
                        "line": 12
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 8
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=13, column=4, column_end = 5, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "cregex_iterator",
                "insertText": "cregex_iterator",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022cregex_iterator",
                "score": 0.8070572018623352,
                "sortText": "40e50b86cregex_iterator",
                "textEdit": {
                    "newText": "cregex_iterator",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4115985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41232696copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41232696count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "cregex_iterator",
                "insertText": "tr1::cregex_iterator",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::cregex_iterator",
                "score": 0.2698061466217041,
                "sortText": "41b0c9f4cregex_iterator",
                "textEdit": {
                    "newText": "tr1::cregex_iterator",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove_copy_if",
                "insertText": "remove_copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove_copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "426cc464remove_copy_if",
                "textEdit": {
                    "newText": "remove_copy_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "replace_copy_if",
                "insertText": "replace_copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022replace_copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "426cc464replace_copy_if",
                "textEdit": {
                    "newText": "replace_copy_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvtsh_i32",
                "insertText": "_mm_cvtsh_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvtsh_i32(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvtsh_i32",
                "textEdit": {
                    "newText": "_mm_cvtsh_i32",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvtsh_i64",
                "insertText": "_mm_cvtsh_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvtsh_i64(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvtsh_i64",
                "textEdit": {
                    "newText": "_mm_cvtsh_i64",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsd_i32",
                "insertText": "_mm_cvttsd_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsd_i32(__m128d A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsd_i32",
                "textEdit": {
                    "newText": "_mm_cvttsd_i32",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsd_i64",
                "insertText": "_mm_cvttsd_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsd_i64(__m128d A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsd_i64",
                "textEdit": {
                    "newText": "_mm_cvttsd_i64",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsh_i32",
                "insertText": "_mm_cvttsh_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsh_i32(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsh_i32",
                "textEdit": {
                    "newText": "_mm_cvttsh_i32",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsh_i64",
                "insertText": "_mm_cvttsh_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsh_i64(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsh_i64",
                "textEdit": {
                    "newText": "_mm_cvttsh_i64",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttss_i32",
                "insertText": "_mm_cvttss_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttss_i32(__m128 A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttss_i32",
                "textEdit": {
                    "newText": "_mm_cvttss_i32",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttss_i64",
                "insertText": "_mm_cvttss_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttss_i64(__m128 A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttss_i64",
                "textEdit": {
                    "newText": "_mm_cvttss_i64",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmimfp16ps_internal",
                "insertText": "_tile_cmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmrlfp16ps_internal",
                "insertText": "_tile_cmmrlfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmrlfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cmmrlfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmrlfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtcmmimfp16ps_internal",
                "insertText": "_tile_conjtcmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtcmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_conjtcmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_conjtcmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtfp16_internal",
                "insertText": "_tile_conjtfp16_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtfp16_internal(unsigned short m, unsigned short n, _tile1024i src)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_conjtfp16_internal",
                "textEdit": {
                    "newText": "_tile_conjtfp16_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nThis is internal intrinsic. C/C++ user should avoid calling it directly."
                },
                "filterText": "_tile_cvtrowd2ps_internal",
                "insertText": "_tile_cvtrowd2ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowd2ps_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowd2ps_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowd2ps_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16h_internal",
                "insertText": "_tile_cvtrowps2bf16h_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16h_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2bf16h_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16h_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16l_internal",
                "insertText": "_tile_cvtrowps2bf16l_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16l_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2bf16l_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16l_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phh_internal",
                "insertText": "_tile_cvtrowps2phh_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phh_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2phh_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phh_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phl_internal",
                "insertText": "_tile_cvtrowps2phl_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phl_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2phl_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phl_internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'ci'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 12
                    },
                    "start": {
                        "character": 0,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 10
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=0, column_end = 2, message=Unknown type name 'ci')]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "chrono",
                "insertText": "chrono",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono",
                "textEdit": {
                    "newText": "chrono",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT1",
                "insertText": "CSALCAT1",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT1(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT1",
                "textEdit": {
                    "newText": "CSALCAT1",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT2",
                "insertText": "CSALCAT2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT2(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT2",
                "textEdit": {
                    "newText": "CSALCAT2",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "CLK_TCK",
                "insertText": "CLK_TCK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLK_TCK",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLK_TCK",
                "textEdit": {
                    "newText": "CLK_TCK",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "CLOCKS_PER_SEC",
                "insertText": "CLOCKS_PER_SEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLOCKS_PER_SEC",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLOCKS_PER_SEC",
                "textEdit": {
                    "newText": "CLOCKS_PER_SEC",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "CW_DEFAULT",
                "insertText": "CW_DEFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CW_DEFAULT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CW_DEFAULT",
                "textEdit": {
                    "newText": "CW_DEFAULT",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "clear87",
                "insertText": "clear87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022clear87",
                "score": 0.8436345458030701,
                "sortText": "40a80791clear87",
                "textEdit": {
                    "newText": "clear87",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "cv_status",
                "insertText": "cv_status",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022cv_status",
                "score": 0.8070572018623352,
                "sortText": "40b164b3cv_status",
                "textEdit": {
                    "newText": "cv_status",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddcall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nTypes\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022clock_t",
                "score": 0.5684974789619446,
                "sortText": "40ee76f3clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "CaptureCallstack",
                "insertText": "Concurrency::details::platform::CaptureCallstack",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::platform::CaptureCallstack(void **, size_t, size_t)",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dCaptureCallstack",
                "textEdit": {
                    "newText": "Concurrency::details::platform::CaptureCallstack",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Cancels the currently executing task. This function can be called from within the body of a task to abort the task's execution and cause it to enter the <c>canceled</c> state. While it may be used in response to a cancellation request through a <c>cancellation_token</c>, you may also use it by itself, to initiate cancellation of the task that is currently executing.\n<para>It is not a supported scenario to call this function if you are not within the body of a <c>task</c>.\nDoing so will result in undefined behavior such as a crash or a hang in your application.</para> </summary> <seealso cref=\"task Class\"/>"
                },
                "filterText": "cancel_current_task",
                "insertText": "Concurrency::cancel_current_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::cancel_current_task()",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dcancel_current_task",
                "textEdit": {
                    "newText": "Concurrency::cancel_current_task",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nNo modf(), types must match"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\n3-arg hypot() is hand-crafted"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<typename details::_TaskTypeFromParam<Ty>::_Type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(Ty Param, task_options TaskOptions = task_options())",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<ReturnType>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <param name=\"_Token\"> The cancellation token to associate with the task. When the source for this token is canceled, cancellation will be requested on the task.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(const task<ReturnType> &Task)",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "To",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const duration<Rep, Period> &Dur)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "time_point<Clock, To>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const time_point<Clock, Duration> &Time)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.45782190561294556,
                "sortText": "4115985ecerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4115985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.45782190561294556,
                "sortText": "4115985eclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4115985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c16rtomb",
                "insertText": "c16rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c16rtomb(char *S, char16_t C16, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc16rtomb",
                "textEdit": {
                    "newText": "c16rtomb",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c32rtomb",
                "insertText": "c32rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c32rtomb(char *S, char32_t C32, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc32rtomb",
                "textEdit": {
                    "newText": "c32rtomb",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "clock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clock()",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "ctime_s",
                "insertText": "ctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime_s(char *const Buffer, const size_t SizeInBytes, const time_t *const Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbctime_s",
                "textEdit": {
                    "newText": "ctime_s",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "ctime",
                "insertText": "ctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime(const time_t *const Time)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35ctime",
                "textEdit": {
                    "newText": "ctime",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The <c>task_group</c> or <c>structured_task_group</c> object was canceled. One or more tasks may not have executed.\n</summary>"
                },
                "filterText": "canceled",
                "insertText": "Concurrency::canceled",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::canceled",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecanceled",
                "textEdit": {
                    "newText": "Concurrency::canceled",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEXDEV"
                },
                "filterText": "cross_device_link",
                "insertText": "errc::cross_device_link",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::cross_device_link",
                "score": 0.3138078451156616,
                "sortText": "415f5494cross_device_link",
                "textEdit": {
                    "newText": "errc::cross_device_link",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrt",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtf",
                "insertText": "cbrtf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtf",
                "textEdit": {
                    "newText": "cbrtf",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtl",
                "insertText": "cbrtl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtl",
                "textEdit": {
                    "newText": "cbrtl",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceil",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceilf",
                "insertText": "ceilf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceilf",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceilf",
                "textEdit": {
                    "newText": "ceilf",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceill",
                "insertText": "ceill",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceill",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceill",
                "textEdit": {
                    "newText": "ceill",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'c'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 12
                    },
                    "start": {
                        "character": 0,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 12
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=0, column_end = 1, message=Unknown type name 'c')]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 3.833096742630005,
                "sortText": "3f8aae8binteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 3.833096742630005,
                "sortText": "3f8aae8binteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 2.948925256729126,
                "sortText": "3fc344cfx",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.9800145626068115,
                "sortText": "40851dc4SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.73712557554245,
                "sortText": "40c34bbd_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.73712557554245,
                "sortText": "40c34bbdtype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_argv_mode",
                "insertText": "_crt_argv_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_argv_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_argv_mode",
                "textEdit": {
                    "newText": "_crt_argv_mode",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "align",
                "insertText": "align",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022align(size_t Bound, size_t Size, void *&Ptr, size_t &Space)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddalign",
                "textEdit": {
                    "newText": "align",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "notify_all_at_thread_exit",
                "insertText": "notify_all_at_thread_exit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022notify_all_at_thread_exit(condition_variable &Cnd, unique_lock<mutex> Lck)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddnotify_all_at_thread_exit",
                "textEdit": {
                    "newText": "notify_all_at_thread_exit",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const allocator<Ty> &, const allocator<Other> &)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const allocator<Ty> &, const allocator<Other> &)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "return_temporary_buffer",
                "insertText": "return_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022return_temporary_buffer(Ty *Pbuf)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddreturn_temporary_buffer",
                "textEdit": {
                    "newText": "return_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_fill",
                "insertText": "uninitialized_fill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_fill(const NoThrowFwdIt First, const NoThrowFwdIt Last, const Tval &Val)",
                "score": 0.5893728137016296,
                "sortText": "40e91edduninitialized_fill",
                "textEdit": {
                    "newText": "uninitialized_fill",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "pair<Ty *, ptrdiff_t>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "get_temporary_buffer",
                "insertText": "get_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_temporary_buffer<class Ty>(ptrdiff_t Count)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464get_temporary_buffer",
                "textEdit": {
                    "newText": "get_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove",
                "insertText": "remove",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove(FwdIt First, const FwdIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464remove",
                "textEdit": {
                    "newText": "remove",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove_if",
                "insertText": "remove_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove_if(FwdIt First, const FwdIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464remove_if",
                "textEdit": {
                    "newText": "remove_if",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "NoThrowFwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_copy",
                "insertText": "uninitialized_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_copy(const InIt First, const InIt Last, NoThrowFwdIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464uninitialized_copy",
                "textEdit": {
                    "newText": "uninitialized_copy",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_crt_argv_mode",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_get_startup_argv_mode",
                "insertText": "_get_startup_argv_mode",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_startup_argv_mode()",
                "score": 0.5127986073493958,
                "sortText": "40fcb93b_get_startup_argv_mode",
                "textEdit": {
                    "newText": "_get_startup_argv_mode",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_ADAPTOR_EMPLACE_RETURN",
                "insertText": "_ADAPTOR_EMPLACE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ADAPTOR_EMPLACE_RETURN",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_ADAPTOR_EMPLACE_RETURN",
                "textEdit": {
                    "newText": "_ADAPTOR_EMPLACE_RETURN",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCINFO",
                "insertText": "_BEGIN_LOCINFO",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCINFO(_VarName)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_BEGIN_LOCINFO",
                "textEdit": {
                    "newText": "_BEGIN_LOCINFO",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCK",
                "insertText": "_BEGIN_LOCK",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCK(_Kind)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_BEGIN_LOCK",
                "textEdit": {
                    "newText": "_BEGIN_LOCK",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH",
                "insertText": "_CATCH",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_CATCH(x)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH",
                "textEdit": {
                    "newText": "_CATCH",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_ALL",
                "insertText": "_CATCH_ALL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_ALL",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH_ALL",
                "textEdit": {
                    "newText": "_CATCH_ALL",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_END",
                "insertText": "_CATCH_END",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_END",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH_END",
                "textEdit": {
                    "newText": "_CATCH_END",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_CLANG_CONSTEXPR20",
                "insertText": "_CLANG_CONSTEXPR20",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CLANG_CONSTEXPR20",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CLANG_CONSTEXPR20",
                "textEdit": {
                    "newText": "_CLANG_CONSTEXPR20",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 12
                        },
                        "start": {
                            "character": 0,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 14
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 16
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 18
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 20
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 3.833096742630005,
                "sortText": "3f8aae8binteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 3.833096742630005,
                "sortText": "3f8aae8binteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 2.948925256729126,
                "sortText": "3fc344cfx",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.9800145626068115,
                "sortText": "40851dc4SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.73712557554245,
                "sortText": "40c34bbd_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.73712557554245,
                "sortText": "40c34bbdtype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_argv_mode",
                "insertText": "_crt_argv_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_argv_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_argv_mode",
                "textEdit": {
                    "newText": "_crt_argv_mode",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "align",
                "insertText": "align",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022align(size_t Bound, size_t Size, void *&Ptr, size_t &Space)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddalign",
                "textEdit": {
                    "newText": "align",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "notify_all_at_thread_exit",
                "insertText": "notify_all_at_thread_exit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022notify_all_at_thread_exit(condition_variable &Cnd, unique_lock<mutex> Lck)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddnotify_all_at_thread_exit",
                "textEdit": {
                    "newText": "notify_all_at_thread_exit",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const allocator<Ty> &, const allocator<Other> &)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const allocator<Ty> &, const allocator<Other> &)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "return_temporary_buffer",
                "insertText": "return_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022return_temporary_buffer(Ty *Pbuf)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddreturn_temporary_buffer",
                "textEdit": {
                    "newText": "return_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_fill",
                "insertText": "uninitialized_fill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_fill(const NoThrowFwdIt First, const NoThrowFwdIt Last, const Tval &Val)",
                "score": 0.5893728137016296,
                "sortText": "40e91edduninitialized_fill",
                "textEdit": {
                    "newText": "uninitialized_fill",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "pair<Ty *, ptrdiff_t>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "get_temporary_buffer",
                "insertText": "get_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_temporary_buffer<class Ty>(ptrdiff_t Count)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464get_temporary_buffer",
                "textEdit": {
                    "newText": "get_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove",
                "insertText": "remove",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove(FwdIt First, const FwdIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464remove",
                "textEdit": {
                    "newText": "remove",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove_if",
                "insertText": "remove_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove_if(FwdIt First, const FwdIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464remove_if",
                "textEdit": {
                    "newText": "remove_if",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "NoThrowFwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_copy",
                "insertText": "uninitialized_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_copy(const InIt First, const InIt Last, NoThrowFwdIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464uninitialized_copy",
                "textEdit": {
                    "newText": "uninitialized_copy",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_crt_argv_mode",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_get_startup_argv_mode",
                "insertText": "_get_startup_argv_mode",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_startup_argv_mode()",
                "score": 0.5127986073493958,
                "sortText": "40fcb93b_get_startup_argv_mode",
                "textEdit": {
                    "newText": "_get_startup_argv_mode",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_ADAPTOR_EMPLACE_RETURN",
                "insertText": "_ADAPTOR_EMPLACE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ADAPTOR_EMPLACE_RETURN",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_ADAPTOR_EMPLACE_RETURN",
                "textEdit": {
                    "newText": "_ADAPTOR_EMPLACE_RETURN",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCINFO",
                "insertText": "_BEGIN_LOCINFO",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCINFO(_VarName)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_BEGIN_LOCINFO",
                "textEdit": {
                    "newText": "_BEGIN_LOCINFO",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCK",
                "insertText": "_BEGIN_LOCK",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCK(_Kind)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_BEGIN_LOCK",
                "textEdit": {
                    "newText": "_BEGIN_LOCK",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH",
                "insertText": "_CATCH",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_CATCH(x)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH",
                "textEdit": {
                    "newText": "_CATCH",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_ALL",
                "insertText": "_CATCH_ALL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_ALL",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH_ALL",
                "textEdit": {
                    "newText": "_CATCH_ALL",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_END",
                "insertText": "_CATCH_END",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_END",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH_END",
                "textEdit": {
                    "newText": "_CATCH_END",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_CLANG_CONSTEXPR20",
                "insertText": "_CLANG_CONSTEXPR20",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CLANG_CONSTEXPR20",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CLANG_CONSTEXPR20",
                "textEdit": {
                    "newText": "_CLANG_CONSTEXPR20",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'c'",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 12
                    },
                    "start": {
                        "character": 3,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 22
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=3, column_end = 4, message=Unknown type name 'c')]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "chrono",
                "insertText": "chrono",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono",
                "textEdit": {
                    "newText": "chrono",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT1",
                "insertText": "CSALCAT1",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT1(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT1",
                "textEdit": {
                    "newText": "CSALCAT1",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT2",
                "insertText": "CSALCAT2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT2(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT2",
                "textEdit": {
                    "newText": "CSALCAT2",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "CLK_TCK",
                "insertText": "CLK_TCK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLK_TCK",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLK_TCK",
                "textEdit": {
                    "newText": "CLK_TCK",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "CLOCKS_PER_SEC",
                "insertText": "CLOCKS_PER_SEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLOCKS_PER_SEC",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLOCKS_PER_SEC",
                "textEdit": {
                    "newText": "CLOCKS_PER_SEC",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "CW_DEFAULT",
                "insertText": "CW_DEFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CW_DEFAULT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CW_DEFAULT",
                "textEdit": {
                    "newText": "CW_DEFAULT",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "clear87",
                "insertText": "clear87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022clear87",
                "score": 0.8436345458030701,
                "sortText": "40a80791clear87",
                "textEdit": {
                    "newText": "clear87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "cv_status",
                "insertText": "cv_status",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022cv_status",
                "score": 0.8070572018623352,
                "sortText": "40b164b3cv_status",
                "textEdit": {
                    "newText": "cv_status",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddcall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nTypes\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022clock_t",
                "score": 0.5684974789619446,
                "sortText": "40ee76f3clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "CaptureCallstack",
                "insertText": "Concurrency::details::platform::CaptureCallstack",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::platform::CaptureCallstack(void **, size_t, size_t)",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dCaptureCallstack",
                "textEdit": {
                    "newText": "Concurrency::details::platform::CaptureCallstack",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Cancels the currently executing task. This function can be called from within the body of a task to abort the task's execution and cause it to enter the <c>canceled</c> state. While it may be used in response to a cancellation request through a <c>cancellation_token</c>, you may also use it by itself, to initiate cancellation of the task that is currently executing.\n<para>It is not a supported scenario to call this function if you are not within the body of a <c>task</c>.\nDoing so will result in undefined behavior such as a crash or a hang in your application.</para> </summary> <seealso cref=\"task Class\"/>"
                },
                "filterText": "cancel_current_task",
                "insertText": "Concurrency::cancel_current_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::cancel_current_task()",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dcancel_current_task",
                "textEdit": {
                    "newText": "Concurrency::cancel_current_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nNo modf(), types must match"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\n3-arg hypot() is hand-crafted"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<typename details::_TaskTypeFromParam<Ty>::_Type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(Ty Param, task_options TaskOptions = task_options())",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<ReturnType>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <param name=\"_Token\"> The cancellation token to associate with the task. When the source for this token is canceled, cancellation will be requested on the task.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(const task<ReturnType> &Task)",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "To",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const duration<Rep, Period> &Dur)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "time_point<Clock, To>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const time_point<Clock, Duration> &Time)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.45782190561294556,
                "sortText": "4115985ecerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4115985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.45782190561294556,
                "sortText": "4115985eclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4115985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c16rtomb",
                "insertText": "c16rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c16rtomb(char *S, char16_t C16, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc16rtomb",
                "textEdit": {
                    "newText": "c16rtomb",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c32rtomb",
                "insertText": "c32rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c32rtomb(char *S, char32_t C32, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc32rtomb",
                "textEdit": {
                    "newText": "c32rtomb",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "clock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clock()",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "ctime_s",
                "insertText": "ctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime_s(char *const Buffer, const size_t SizeInBytes, const time_t *const Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbctime_s",
                "textEdit": {
                    "newText": "ctime_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "ctime",
                "insertText": "ctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime(const time_t *const Time)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35ctime",
                "textEdit": {
                    "newText": "ctime",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The <c>task_group</c> or <c>structured_task_group</c> object was canceled. One or more tasks may not have executed.\n</summary>"
                },
                "filterText": "canceled",
                "insertText": "Concurrency::canceled",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::canceled",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecanceled",
                "textEdit": {
                    "newText": "Concurrency::canceled",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEXDEV"
                },
                "filterText": "cross_device_link",
                "insertText": "errc::cross_device_link",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::cross_device_link",
                "score": 0.3138078451156616,
                "sortText": "415f5494cross_device_link",
                "textEdit": {
                    "newText": "errc::cross_device_link",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrt",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtf",
                "insertText": "cbrtf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtf",
                "textEdit": {
                    "newText": "cbrtf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtl",
                "insertText": "cbrtl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtl",
                "textEdit": {
                    "newText": "cbrtl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceil",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceilf",
                "insertText": "ceilf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceilf",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceilf",
                "textEdit": {
                    "newText": "ceilf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceill",
                "insertText": "ceill",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceill",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceill",
                "textEdit": {
                    "newText": "ceill",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "41232696copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "ctype_base::(unnamed)",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "cntrl",
                "insertText": "ctype_base::cntrl",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ctype_base::cntrl",
                "score": 0.3138078451156616,
                "sortText": "415f5494cntrl",
                "textEdit": {
                    "newText": "ctype_base::cntrl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "NoThrowFwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_copy_n",
                "insertText": "uninitialized_copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_copy_n(const InIt First, const Diff Count_raw, NoThrowFwdIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "426cc464uninitialized_copy_n",
                "textEdit": {
                    "newText": "uninitialized_copy_n",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNot below."
                },
                "filterText": "_CMPCCX_NB",
                "insertText": "_CMPCCX_NB",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NB",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NB",
                "textEdit": {
                    "newText": "_CMPCCX_NB",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNeither below nor equal."
                },
                "filterText": "_CMPCCX_NBE",
                "insertText": "_CMPCCX_NBE",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NBE",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NBE",
                "textEdit": {
                    "newText": "_CMPCCX_NBE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNot less."
                },
                "filterText": "_CMPCCX_NL",
                "insertText": "_CMPCCX_NL",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NL",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NL",
                "textEdit": {
                    "newText": "_CMPCCX_NL",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNeither less nor equal."
                },
                "filterText": "_CMPCCX_NLE",
                "insertText": "_CMPCCX_NLE",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NLE",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NLE",
                "textEdit": {
                    "newText": "_CMPCCX_NLE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNo overflow."
                },
                "filterText": "_CMPCCX_NO",
                "insertText": "_CMPCCX_NO",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NO",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NO",
                "textEdit": {
                    "newText": "_CMPCCX_NO",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNo parity."
                },
                "filterText": "_CMPCCX_NP",
                "insertText": "_CMPCCX_NP",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NP",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NP",
                "textEdit": {
                    "newText": "_CMPCCX_NP",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNo sign."
                },
                "filterText": "_CMPCCX_NS",
                "insertText": "_CMPCCX_NS",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NS",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NS",
                "textEdit": {
                    "newText": "_CMPCCX_NS",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNot zero."
                },
                "filterText": "_CMPCCX_NZ",
                "insertText": "_CMPCCX_NZ",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NZ",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NZ",
                "textEdit": {
                    "newText": "_CMPCCX_NZ",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_MM_CMPINT_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nNot Equal"
                },
                "filterText": "_MM_CMPINT_NE",
                "insertText": "_MM_CMPINT_NE",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_MM_CMPINT_NE",
                "score": 0.20975063741207123,
                "sortText": "80000000_MM_CMPINT_NE",
                "textEdit": {
                    "newText": "_MM_CMPINT_NE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_MM_CMPINT_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nNot Less than or Equal"
                },
                "filterText": "_MM_CMPINT_NLE",
                "insertText": "_MM_CMPINT_NLE",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_MM_CMPINT_NLE",
                "score": 0.20975063741207123,
                "sortText": "80000000_MM_CMPINT_NLE",
                "textEdit": {
                    "newText": "_MM_CMPINT_NLE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_MM_CMPINT_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nNot Less than"
                },
                "filterText": "_MM_CMPINT_NLT",
                "insertText": "_MM_CMPINT_NLT",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_MM_CMPINT_NLT",
                "score": 0.20975063741207123,
                "sortText": "80000000_MM_CMPINT_NLT",
                "textEdit": {
                    "newText": "_MM_CMPINT_NLT",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'cni'",
                "range": {
                    "end": {
                        "character": 6,
                        "line": 12
                    },
                    "start": {
                        "character": 3,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 26
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=3, column_end = 6, message=Unknown type name 'cni')]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "41232696copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "ctype_base::(unnamed)",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "cntrl",
                "insertText": "ctype_base::cntrl",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ctype_base::cntrl",
                "score": 0.3138078451156616,
                "sortText": "415f5494cntrl",
                "textEdit": {
                    "newText": "ctype_base::cntrl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "NoThrowFwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_copy_n",
                "insertText": "uninitialized_copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_copy_n(const InIt First, const Diff Count_raw, NoThrowFwdIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "426cc464uninitialized_copy_n",
                "textEdit": {
                    "newText": "uninitialized_copy_n",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNot below."
                },
                "filterText": "_CMPCCX_NB",
                "insertText": "_CMPCCX_NB",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NB",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NB",
                "textEdit": {
                    "newText": "_CMPCCX_NB",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNeither below nor equal."
                },
                "filterText": "_CMPCCX_NBE",
                "insertText": "_CMPCCX_NBE",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NBE",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NBE",
                "textEdit": {
                    "newText": "_CMPCCX_NBE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNot less."
                },
                "filterText": "_CMPCCX_NL",
                "insertText": "_CMPCCX_NL",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NL",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NL",
                "textEdit": {
                    "newText": "_CMPCCX_NL",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNeither less nor equal."
                },
                "filterText": "_CMPCCX_NLE",
                "insertText": "_CMPCCX_NLE",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NLE",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NLE",
                "textEdit": {
                    "newText": "_CMPCCX_NLE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNo overflow."
                },
                "filterText": "_CMPCCX_NO",
                "insertText": "_CMPCCX_NO",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NO",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NO",
                "textEdit": {
                    "newText": "_CMPCCX_NO",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNo parity."
                },
                "filterText": "_CMPCCX_NP",
                "insertText": "_CMPCCX_NP",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NP",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NP",
                "textEdit": {
                    "newText": "_CMPCCX_NP",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNo sign."
                },
                "filterText": "_CMPCCX_NS",
                "insertText": "_CMPCCX_NS",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NS",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NS",
                "textEdit": {
                    "newText": "_CMPCCX_NS",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <x86gprintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_CMPCCX_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <x86gprintrin.h>\nNot zero."
                },
                "filterText": "_CMPCCX_NZ",
                "insertText": "_CMPCCX_NZ",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_CMPCCX_NZ",
                "score": 0.20975063741207123,
                "sortText": "43293721_CMPCCX_NZ",
                "textEdit": {
                    "newText": "_CMPCCX_NZ",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_MM_CMPINT_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nNot Equal"
                },
                "filterText": "_MM_CMPINT_NE",
                "insertText": "_MM_CMPINT_NE",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_MM_CMPINT_NE",
                "score": 0.20975063741207123,
                "sortText": "80000000_MM_CMPINT_NE",
                "textEdit": {
                    "newText": "_MM_CMPINT_NE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_MM_CMPINT_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nNot Less than or Equal"
                },
                "filterText": "_MM_CMPINT_NLE",
                "insertText": "_MM_CMPINT_NLE",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_MM_CMPINT_NLE",
                "score": 0.20975063741207123,
                "sortText": "80000000_MM_CMPINT_NLE",
                "textEdit": {
                    "newText": "_MM_CMPINT_NLE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_MM_CMPINT_ENUM",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nNot Less than"
                },
                "filterText": "_MM_CMPINT_NLT",
                "insertText": "_MM_CMPINT_NLT",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_MM_CMPINT_NLT",
                "score": 0.20975063741207123,
                "sortText": "80000000_MM_CMPINT_NLT",
                "textEdit": {
                    "newText": "_MM_CMPINT_NLT",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'cn'",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 12
                    },
                    "start": {
                        "character": 3,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 28
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=3, column_end = 5, message=Unknown type name 'cn')]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "chrono",
                "insertText": "chrono",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono",
                "textEdit": {
                    "newText": "chrono",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT1",
                "insertText": "CSALCAT1",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT1(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT1",
                "textEdit": {
                    "newText": "CSALCAT1",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT2",
                "insertText": "CSALCAT2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT2(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT2",
                "textEdit": {
                    "newText": "CSALCAT2",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "CLK_TCK",
                "insertText": "CLK_TCK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLK_TCK",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLK_TCK",
                "textEdit": {
                    "newText": "CLK_TCK",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "CLOCKS_PER_SEC",
                "insertText": "CLOCKS_PER_SEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLOCKS_PER_SEC",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLOCKS_PER_SEC",
                "textEdit": {
                    "newText": "CLOCKS_PER_SEC",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "CW_DEFAULT",
                "insertText": "CW_DEFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CW_DEFAULT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CW_DEFAULT",
                "textEdit": {
                    "newText": "CW_DEFAULT",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "clear87",
                "insertText": "clear87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022clear87",
                "score": 0.8436345458030701,
                "sortText": "40a80791clear87",
                "textEdit": {
                    "newText": "clear87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "cv_status",
                "insertText": "cv_status",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022cv_status",
                "score": 0.8070572018623352,
                "sortText": "40b164b3cv_status",
                "textEdit": {
                    "newText": "cv_status",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddcall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nTypes\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022clock_t",
                "score": 0.5684974789619446,
                "sortText": "40ee76f3clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "CaptureCallstack",
                "insertText": "Concurrency::details::platform::CaptureCallstack",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::platform::CaptureCallstack(void **, size_t, size_t)",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dCaptureCallstack",
                "textEdit": {
                    "newText": "Concurrency::details::platform::CaptureCallstack",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Cancels the currently executing task. This function can be called from within the body of a task to abort the task's execution and cause it to enter the <c>canceled</c> state. While it may be used in response to a cancellation request through a <c>cancellation_token</c>, you may also use it by itself, to initiate cancellation of the task that is currently executing.\n<para>It is not a supported scenario to call this function if you are not within the body of a <c>task</c>.\nDoing so will result in undefined behavior such as a crash or a hang in your application.</para> </summary> <seealso cref=\"task Class\"/>"
                },
                "filterText": "cancel_current_task",
                "insertText": "Concurrency::cancel_current_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::cancel_current_task()",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dcancel_current_task",
                "textEdit": {
                    "newText": "Concurrency::cancel_current_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nNo modf(), types must match"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\n3-arg hypot() is hand-crafted"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<typename details::_TaskTypeFromParam<Ty>::_Type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(Ty Param, task_options TaskOptions = task_options())",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<ReturnType>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <param name=\"_Token\"> The cancellation token to associate with the task. When the source for this token is canceled, cancellation will be requested on the task.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(const task<ReturnType> &Task)",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "To",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const duration<Rep, Period> &Dur)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "time_point<Clock, To>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const time_point<Clock, Duration> &Time)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.45782190561294556,
                "sortText": "4115985ecerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4115985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.45782190561294556,
                "sortText": "4115985eclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4115985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c16rtomb",
                "insertText": "c16rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c16rtomb(char *S, char16_t C16, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc16rtomb",
                "textEdit": {
                    "newText": "c16rtomb",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c32rtomb",
                "insertText": "c32rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c32rtomb(char *S, char32_t C32, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc32rtomb",
                "textEdit": {
                    "newText": "c32rtomb",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "clock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clock()",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "ctime_s",
                "insertText": "ctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime_s(char *const Buffer, const size_t SizeInBytes, const time_t *const Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbctime_s",
                "textEdit": {
                    "newText": "ctime_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "ctime",
                "insertText": "ctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime(const time_t *const Time)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35ctime",
                "textEdit": {
                    "newText": "ctime",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The <c>task_group</c> or <c>structured_task_group</c> object was canceled. One or more tasks may not have executed.\n</summary>"
                },
                "filterText": "canceled",
                "insertText": "Concurrency::canceled",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::canceled",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecanceled",
                "textEdit": {
                    "newText": "Concurrency::canceled",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEXDEV"
                },
                "filterText": "cross_device_link",
                "insertText": "errc::cross_device_link",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::cross_device_link",
                "score": 0.3138078451156616,
                "sortText": "415f5494cross_device_link",
                "textEdit": {
                    "newText": "errc::cross_device_link",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrt",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtf",
                "insertText": "cbrtf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtf",
                "textEdit": {
                    "newText": "cbrtf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtl",
                "insertText": "cbrtl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtl",
                "textEdit": {
                    "newText": "cbrtl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceil",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceilf",
                "insertText": "ceilf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceilf",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceilf",
                "textEdit": {
                    "newText": "ceilf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceill",
                "insertText": "ceill",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceill",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceill",
                "textEdit": {
                    "newText": "ceill",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'c'",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 12
                    },
                    "start": {
                        "character": 3,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 30
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=3, column_end = 4, message=Unknown type name 'c')]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "chrono",
                "insertText": "chrono",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono",
                "textEdit": {
                    "newText": "chrono",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT1",
                "insertText": "CSALCAT1",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT1(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT1",
                "textEdit": {
                    "newText": "CSALCAT1",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT2",
                "insertText": "CSALCAT2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT2(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT2",
                "textEdit": {
                    "newText": "CSALCAT2",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "CLK_TCK",
                "insertText": "CLK_TCK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLK_TCK",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLK_TCK",
                "textEdit": {
                    "newText": "CLK_TCK",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "CLOCKS_PER_SEC",
                "insertText": "CLOCKS_PER_SEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLOCKS_PER_SEC",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLOCKS_PER_SEC",
                "textEdit": {
                    "newText": "CLOCKS_PER_SEC",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "CW_DEFAULT",
                "insertText": "CW_DEFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CW_DEFAULT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CW_DEFAULT",
                "textEdit": {
                    "newText": "CW_DEFAULT",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "clear87",
                "insertText": "clear87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022clear87",
                "score": 0.8436345458030701,
                "sortText": "40a80791clear87",
                "textEdit": {
                    "newText": "clear87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "cv_status",
                "insertText": "cv_status",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022cv_status",
                "score": 0.8070572018623352,
                "sortText": "40b164b3cv_status",
                "textEdit": {
                    "newText": "cv_status",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddcall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nTypes\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022clock_t",
                "score": 0.5684974789619446,
                "sortText": "40ee76f3clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "CaptureCallstack",
                "insertText": "Concurrency::details::platform::CaptureCallstack",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::platform::CaptureCallstack(void **, size_t, size_t)",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dCaptureCallstack",
                "textEdit": {
                    "newText": "Concurrency::details::platform::CaptureCallstack",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Cancels the currently executing task. This function can be called from within the body of a task to abort the task's execution and cause it to enter the <c>canceled</c> state. While it may be used in response to a cancellation request through a <c>cancellation_token</c>, you may also use it by itself, to initiate cancellation of the task that is currently executing.\n<para>It is not a supported scenario to call this function if you are not within the body of a <c>task</c>.\nDoing so will result in undefined behavior such as a crash or a hang in your application.</para> </summary> <seealso cref=\"task Class\"/>"
                },
                "filterText": "cancel_current_task",
                "insertText": "Concurrency::cancel_current_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::cancel_current_task()",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dcancel_current_task",
                "textEdit": {
                    "newText": "Concurrency::cancel_current_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nNo modf(), types must match"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\n3-arg hypot() is hand-crafted"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<typename details::_TaskTypeFromParam<Ty>::_Type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(Ty Param, task_options TaskOptions = task_options())",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<ReturnType>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <param name=\"_Token\"> The cancellation token to associate with the task. When the source for this token is canceled, cancellation will be requested on the task.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(const task<ReturnType> &Task)",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "To",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const duration<Rep, Period> &Dur)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "time_point<Clock, To>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const time_point<Clock, Duration> &Time)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.45782190561294556,
                "sortText": "4115985ecerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4115985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.45782190561294556,
                "sortText": "4115985eclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4115985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c16rtomb",
                "insertText": "c16rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c16rtomb(char *S, char16_t C16, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc16rtomb",
                "textEdit": {
                    "newText": "c16rtomb",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c32rtomb",
                "insertText": "c32rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c32rtomb(char *S, char32_t C32, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc32rtomb",
                "textEdit": {
                    "newText": "c32rtomb",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "clock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clock()",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "ctime_s",
                "insertText": "ctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime_s(char *const Buffer, const size_t SizeInBytes, const time_t *const Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbctime_s",
                "textEdit": {
                    "newText": "ctime_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "ctime",
                "insertText": "ctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime(const time_t *const Time)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35ctime",
                "textEdit": {
                    "newText": "ctime",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The <c>task_group</c> or <c>structured_task_group</c> object was canceled. One or more tasks may not have executed.\n</summary>"
                },
                "filterText": "canceled",
                "insertText": "Concurrency::canceled",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::canceled",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecanceled",
                "textEdit": {
                    "newText": "Concurrency::canceled",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEXDEV"
                },
                "filterText": "cross_device_link",
                "insertText": "errc::cross_device_link",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::cross_device_link",
                "score": 0.3138078451156616,
                "sortText": "415f5494cross_device_link",
                "textEdit": {
                    "newText": "errc::cross_device_link",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrt",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtf",
                "insertText": "cbrtf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtf",
                "textEdit": {
                    "newText": "cbrtf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtl",
                "insertText": "cbrtl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtl",
                "textEdit": {
                    "newText": "cbrtl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceil",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceilf",
                "insertText": "ceilf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceilf",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceilf",
                "textEdit": {
                    "newText": "ceilf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceill",
                "insertText": "ceill",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceill",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceill",
                "textEdit": {
                    "newText": "ceill",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'ci'",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 12
                    },
                    "start": {
                        "character": 3,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 32
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=3, column_end = 5, message=Unknown type name 'ci')]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "cregex_iterator",
                "insertText": "cregex_iterator",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022cregex_iterator",
                "score": 0.8070572018623352,
                "sortText": "40e50b86cregex_iterator",
                "textEdit": {
                    "newText": "cregex_iterator",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4115985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41232696copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41232696count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "cregex_iterator",
                "insertText": "tr1::cregex_iterator",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::cregex_iterator",
                "score": 0.2698061466217041,
                "sortText": "41b0c9f4cregex_iterator",
                "textEdit": {
                    "newText": "tr1::cregex_iterator",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove_copy_if",
                "insertText": "remove_copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove_copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "426cc464remove_copy_if",
                "textEdit": {
                    "newText": "remove_copy_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "replace_copy_if",
                "insertText": "replace_copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022replace_copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "426cc464replace_copy_if",
                "textEdit": {
                    "newText": "replace_copy_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvtsh_i32",
                "insertText": "_mm_cvtsh_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvtsh_i32(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvtsh_i32",
                "textEdit": {
                    "newText": "_mm_cvtsh_i32",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvtsh_i64",
                "insertText": "_mm_cvtsh_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvtsh_i64(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvtsh_i64",
                "textEdit": {
                    "newText": "_mm_cvtsh_i64",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsd_i32",
                "insertText": "_mm_cvttsd_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsd_i32(__m128d A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsd_i32",
                "textEdit": {
                    "newText": "_mm_cvttsd_i32",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsd_i64",
                "insertText": "_mm_cvttsd_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsd_i64(__m128d A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsd_i64",
                "textEdit": {
                    "newText": "_mm_cvttsd_i64",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsh_i32",
                "insertText": "_mm_cvttsh_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsh_i32(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsh_i32",
                "textEdit": {
                    "newText": "_mm_cvttsh_i32",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttsh_i64",
                "insertText": "_mm_cvttsh_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttsh_i64(__m128h A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttsh_i64",
                "textEdit": {
                    "newText": "_mm_cvttsh_i64",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttss_i32",
                "insertText": "_mm_cvttss_i32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttss_i32(__m128 A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttss_i32",
                "textEdit": {
                    "newText": "_mm_cvttss_i32",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_cvttss_i64",
                "insertText": "_mm_cvttss_i64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_cvttss_i64(__m128 A)",
                "score": 0.44337138533592224,
                "sortText": "80000000_mm_cvttss_i64",
                "textEdit": {
                    "newText": "_mm_cvttss_i64",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmimfp16ps_internal",
                "insertText": "_tile_cmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmrlfp16ps_internal",
                "insertText": "_tile_cmmrlfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmrlfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cmmrlfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmrlfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtcmmimfp16ps_internal",
                "insertText": "_tile_conjtcmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtcmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_conjtcmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_conjtcmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtfp16_internal",
                "insertText": "_tile_conjtfp16_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtfp16_internal(unsigned short m, unsigned short n, _tile1024i src)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_conjtfp16_internal",
                "textEdit": {
                    "newText": "_tile_conjtfp16_internal",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nThis is internal intrinsic. C/C++ user should avoid calling it directly."
                },
                "filterText": "_tile_cvtrowd2ps_internal",
                "insertText": "_tile_cvtrowd2ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowd2ps_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowd2ps_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowd2ps_internal",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16h_internal",
                "insertText": "_tile_cvtrowps2bf16h_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16h_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2bf16h_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16h_internal",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16l_internal",
                "insertText": "_tile_cvtrowps2bf16l_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16l_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2bf16l_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16l_internal",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phh_internal",
                "insertText": "_tile_cvtrowps2phh_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phh_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2phh_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phh_internal",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phl_internal",
                "insertText": "_tile_cvtrowps2phl_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phl_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "80000000_tile_cvtrowps2phl_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phl_internal",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4095985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmimfp16ps_internal",
                "insertText": "_tile_cmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmrlfp16ps_internal",
                "insertText": "_tile_cmmrlfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmrlfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cmmrlfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmrlfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtcmmimfp16ps_internal",
                "insertText": "_tile_conjtcmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtcmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_conjtcmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_conjtcmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtfp16_internal",
                "insertText": "_tile_conjtfp16_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtfp16_internal(unsigned short m, unsigned short n, _tile1024i src)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_conjtfp16_internal",
                "textEdit": {
                    "newText": "_tile_conjtfp16_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nThis is internal intrinsic. C/C++ user should avoid calling it directly."
                },
                "filterText": "_tile_cvtrowd2ps_internal",
                "insertText": "_tile_cvtrowd2ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowd2ps_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowd2ps_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowd2ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16h_internal",
                "insertText": "_tile_cvtrowps2bf16h_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16h_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2bf16h_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16h_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16l_internal",
                "insertText": "_tile_cvtrowps2bf16l_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16l_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2bf16l_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16l_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phh_internal",
                "insertText": "_tile_cvtrowps2phh_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phh_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2phh_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phh_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phl_internal",
                "insertText": "_tile_cvtrowps2phl_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phl_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2phl_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phl_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cinb'; did you mean 'cin'? (fix available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\iostream:39:75:\nnote: 'cin' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 12
                    },
                    "start": {
                        "character": 3,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 13
                    },
                    "start": {
                        "character": 4,
                        "line": 13
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 12
                    },
                    "start": {
                        "character": 3,
                        "line": 12
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 36
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=3, column_end = 7, message=Use of undeclared identifier 'cinb'; did you mean 'cin'? (fix available)

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iostream:39:75:
note: 'cin' declared here), Error(line=13, column=4, column_end = 5, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cinb'; did you mean 'cin'? (fix available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\iostream:39:75:\nnote: 'cin' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 12
                    },
                    "start": {
                        "character": 3,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "typecheck_invalid_operands",
                "message": "Invalid operands to binary expression ('istream' (aka 'basic_istream<char, char_traits<char>>') and 'int')\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\utility:529:27:\nnote: candidate template ignored: could not match 'pair' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\xutility:1932:30:\nnote: candidate template ignored: could not match 'reverse_iterator' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\xutility:4490:30:\nnote: candidate template ignored: could not match 'move_iterator' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\xstring:3324:17:\nnote: candidate template ignored: could not match 'basic_string' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\xstring:3330:17:\nnote: candidate template ignored: could not match 'const _Elem *' against 'istream' (aka 'basic_istream<char, char_traits<char>>')\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\xstring:3336:17:\nnote: candidate template ignored: could not match 'basic_string' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:1906:17:\nnote: candidate template ignored: could not match 'shared_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:1963:17:\nnote: candidate template ignored: could not match 'shared_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:1968:17:\nnote: candidate template ignored: could not match 'shared_ptr<_Ty>' against 'int'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:3691:17:\nnote: candidate template ignored: could not match 'unique_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:3756:30:\nnote: candidate template ignored: could not match 'unique_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:3761:30:\nnote: candidate template ignored: could not match 'unique_ptr<_Ty, _Dx>' against 'int'",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 12
                    },
                    "start": {
                        "character": 7,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 42
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=3, column_end = 7, message=Use of undeclared identifier 'cinb'; did you mean 'cin'? (fix available)

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iostream:39:75:
note: 'cin' declared here), Error(line=12, column=7, column_end = 8, message=Invalid operands to binary expression ('istream' (aka 'basic_istream<char, char_traits<char>>') and 'int')

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility:529:27:
note: candidate template ignored: could not match 'pair' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility:1932:30:
note: candidate template ignored: could not match 'reverse_iterator' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility:4490:30:
note: candidate template ignored: could not match 'move_iterator' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring:3324:17:
note: candidate template ignored: could not match 'basic_string' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring:3330:17:
note: candidate template ignored: could not match 'const _Elem *' against 'istream' (aka 'basic_istream<char, char_traits<char>>')

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring:3336:17:
note: candidate template ignored: could not match 'basic_string' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:1906:17:
note: candidate template ignored: could not match 'shared_ptr' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:1963:17:
note: candidate template ignored: could not match 'shared_ptr' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:1968:17:
note: candidate template ignored: could not match 'shared_ptr<_Ty>' against 'int'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:3691:17:
note: candidate template ignored: could not match 'unique_ptr' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:3756:30:
note: candidate template ignored: could not match 'unique_ptr' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:3761:30:
note: candidate template ignored: could not match 'unique_ptr<_Ty, _Dx>' against 'int')]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cinb'; did you mean 'cin'? (fix available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\iostream:39:75:\nnote: 'cin' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 12
                    },
                    "start": {
                        "character": 3,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 13
                    },
                    "start": {
                        "character": 4,
                        "line": 13
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 12
                    },
                    "start": {
                        "character": 3,
                        "line": 12
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 44
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=3, column_end = 7, message=Use of undeclared identifier 'cinb'; did you mean 'cin'? (fix available)

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iostream:39:75:
note: 'cin' declared here), Error(line=13, column=4, column_end = 5, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4095985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmimfp16ps_internal",
                "insertText": "_tile_cmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmrlfp16ps_internal",
                "insertText": "_tile_cmmrlfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmrlfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cmmrlfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmrlfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtcmmimfp16ps_internal",
                "insertText": "_tile_conjtcmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtcmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_conjtcmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_conjtcmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtfp16_internal",
                "insertText": "_tile_conjtfp16_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtfp16_internal(unsigned short m, unsigned short n, _tile1024i src)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_conjtfp16_internal",
                "textEdit": {
                    "newText": "_tile_conjtfp16_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nThis is internal intrinsic. C/C++ user should avoid calling it directly."
                },
                "filterText": "_tile_cvtrowd2ps_internal",
                "insertText": "_tile_cvtrowd2ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowd2ps_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowd2ps_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowd2ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16h_internal",
                "insertText": "_tile_cvtrowps2bf16h_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16h_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2bf16h_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16h_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16l_internal",
                "insertText": "_tile_cvtrowps2bf16l_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16l_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2bf16l_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16l_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phh_internal",
                "insertText": "_tile_cvtrowps2phh_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phh_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2phh_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phh_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phl_internal",
                "insertText": "_tile_cvtrowps2phl_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phl_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2phl_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phl_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 13
                    },
                    "start": {
                        "character": 4,
                        "line": 13
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 6,
                        "line": 12
                    },
                    "start": {
                        "character": 3,
                        "line": 12
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 46
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=13, column=4, column_end = 5, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4095985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmimfp16ps_internal",
                "insertText": "_tile_cmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cmmrlfp16ps_internal",
                "insertText": "_tile_cmmrlfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cmmrlfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cmmrlfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_cmmrlfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtcmmimfp16ps_internal",
                "insertText": "_tile_conjtcmmimfp16ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtcmmimfp16ps_internal(unsigned short m, unsigned short n, unsigned short k, _tile1024i dst, _tile1024i src1, _tile1024i src2)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_conjtcmmimfp16ps_internal",
                "textEdit": {
                    "newText": "_tile_conjtcmmimfp16ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_tile1024i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_conjtfp16_internal",
                "insertText": "_tile_conjtfp16_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_conjtfp16_internal(unsigned short m, unsigned short n, _tile1024i src)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_conjtfp16_internal",
                "textEdit": {
                    "newText": "_tile_conjtfp16_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nThis is internal intrinsic. C/C++ user should avoid calling it directly."
                },
                "filterText": "_tile_cvtrowd2ps_internal",
                "insertText": "_tile_cvtrowd2ps_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowd2ps_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowd2ps_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowd2ps_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16h_internal",
                "insertText": "_tile_cvtrowps2bf16h_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16h_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2bf16h_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16h_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512bh",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2bf16l_internal",
                "insertText": "_tile_cvtrowps2bf16l_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2bf16l_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2bf16l_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2bf16l_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phh_internal",
                "insertText": "_tile_cvtrowps2phh_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phh_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2phh_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phh_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512h",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_tile_cvtrowps2phl_internal",
                "insertText": "_tile_cvtrowps2phl_internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_tile_cvtrowps2phl_internal(unsigned short m, unsigned short n, _tile1024i src, unsigned int u)",
                "score": 0.44337138533592224,
                "sortText": "41e8a99e_tile_cvtrowps2phl_internal",
                "textEdit": {
                    "newText": "_tile_cvtrowps2phl_internal",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 12
                        },
                        "start": {
                            "character": 3,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "typecheck_invalid_operands",
                "message": "Invalid operands to binary expression ('istream' (aka 'basic_istream<char, char_traits<char>>') and 'int')\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\utility:529:27:\nnote: candidate template ignored: could not match 'pair' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\xutility:1932:30:\nnote: candidate template ignored: could not match 'reverse_iterator' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\xutility:4490:30:\nnote: candidate template ignored: could not match 'move_iterator' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\xstring:3324:17:\nnote: candidate template ignored: could not match 'basic_string' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\xstring:3330:17:\nnote: candidate template ignored: could not match 'const _Elem *' against 'istream' (aka 'basic_istream<char, char_traits<char>>')\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\xstring:3336:17:\nnote: candidate template ignored: could not match 'basic_string' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:1906:17:\nnote: candidate template ignored: could not match 'shared_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:1963:17:\nnote: candidate template ignored: could not match 'shared_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:1968:17:\nnote: candidate template ignored: could not match 'shared_ptr<_Ty>' against 'int'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:3691:17:\nnote: candidate template ignored: could not match 'unique_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:3756:30:\nnote: candidate template ignored: could not match 'unique_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\memory:3761:30:\nnote: candidate template ignored: could not match 'unique_ptr<_Ty, _Dx>' against 'int'",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 12
                    },
                    "start": {
                        "character": 6,
                        "line": 12
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 52
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=12, column=6, column_end = 7, message=Invalid operands to binary expression ('istream' (aka 'basic_istream<char, char_traits<char>>') and 'int')

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\utility:529:27:
note: candidate template ignored: could not match 'pair' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility:1932:30:
note: candidate template ignored: could not match 'reverse_iterator' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xutility:4490:30:
note: candidate template ignored: could not match 'move_iterator' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring:3324:17:
note: candidate template ignored: could not match 'basic_string' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring:3330:17:
note: candidate template ignored: could not match 'const _Elem *' against 'istream' (aka 'basic_istream<char, char_traits<char>>')

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring:3336:17:
note: candidate template ignored: could not match 'basic_string' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:1906:17:
note: candidate template ignored: could not match 'shared_ptr' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:1963:17:
note: candidate template ignored: could not match 'shared_ptr' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:1968:17:
note: candidate template ignored: could not match 'shared_ptr<_Ty>' against 'int'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:3691:17:
note: candidate template ignored: could not match 'unique_ptr' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:3756:30:
note: candidate template ignored: could not match 'unique_ptr' against 'basic_istream'

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory:3761:30:
note: candidate template ignored: could not match 'unique_ptr<_Ty, _Dx>' against 'int')]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.404608249664307,
                "sortText": "3f730d73integer1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.404608249664307,
                "sortText": "3f730d73integer2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.423351287841797,
                "sortText": "3fa4e7d0x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 2.013059616088867,
                "sortText": "3fff2a08cin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.513861060142517,
                "sortText": "403e39cdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.353448510169983,
                "sortText": "4052c233main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.7135143280029297,
                "sortText": "40c95720SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6298295259475708,
                "sortText": "40dec37e_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.6298295259475708,
                "sortText": "40dec37etype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedallocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedallocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedbad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedbad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedbad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedcondition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedexception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedwbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedwstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "pair<Ty *, ptrdiff_t>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "get_temporary_buffer",
                "insertText": "get_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_temporary_buffer<class Ty>(ptrdiff_t Count)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9get_temporary_buffer",
                "textEdit": {
                    "newText": "get_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove",
                "insertText": "remove",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove(FwdIt First, const FwdIt Last, const Ty &Val)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9remove",
                "textEdit": {
                    "newText": "remove",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove_if",
                "insertText": "remove_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove_if(FwdIt First, const FwdIt Last, Pr Pred)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9remove_if",
                "textEdit": {
                    "newText": "remove_if",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "NoThrowFwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_copy",
                "insertText": "uninitialized_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_copy(const InIt First, const InIt Last, NoThrowFwdIt Dest)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9uninitialized_copy",
                "textEdit": {
                    "newText": "uninitialized_copy",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_argv_mode",
                "insertText": "_crt_argv_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_argv_mode",
                "score": 0.5417186617851257,
                "sortText": "40f551ed_crt_argv_mode",
                "textEdit": {
                    "newText": "_crt_argv_mode",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.5417186617851257,
                "sortText": "40f551ed_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.5417186617851257,
                "sortText": "40f551ed_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.5391446948051453,
                "sortText": "40f5fa9dCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.5391446948051453,
                "sortText": "40f5fa9dcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.5391446948051453,
                "sortText": "40f5fa9dcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.5391446948051453,
                "sortText": "40f5fa9dcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "align",
                "insertText": "align",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022align(size_t Bound, size_t Size, void *&Ptr, size_t &Space)",
                "score": 0.5326019525527954,
                "sortText": "40f7a766align",
                "textEdit": {
                    "newText": "align",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "notify_all_at_thread_exit",
                "insertText": "notify_all_at_thread_exit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022notify_all_at_thread_exit(condition_variable &Cnd, unique_lock<mutex> Lck)",
                "score": 0.5326019525527954,
                "sortText": "40f7a766notify_all_at_thread_exit",
                "textEdit": {
                    "newText": "notify_all_at_thread_exit",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const allocator<Ty> &, const allocator<Other> &)",
                "score": 0.5326019525527954,
                "sortText": "40f7a766operator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "return_temporary_buffer",
                "insertText": "return_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022return_temporary_buffer(Ty *Pbuf)",
                "score": 0.5326019525527954,
                "sortText": "40f7a766return_temporary_buffer",
                "textEdit": {
                    "newText": "return_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_fill",
                "insertText": "uninitialized_fill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_fill(const NoThrowFwdIt First, const NoThrowFwdIt Last, const Tval &Val)",
                "score": 0.5326019525527954,
                "sortText": "40f7a766uninitialized_fill",
                "textEdit": {
                    "newText": "uninitialized_fill",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_ADAPTOR_EMPLACE_RETURN",
                "insertText": "_ADAPTOR_EMPLACE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ADAPTOR_EMPLACE_RETURN",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_ADAPTOR_EMPLACE_RETURN",
                "textEdit": {
                    "newText": "_ADAPTOR_EMPLACE_RETURN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCINFO",
                "insertText": "_BEGIN_LOCINFO",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCINFO(_VarName)",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_BEGIN_LOCINFO",
                "textEdit": {
                    "newText": "_BEGIN_LOCINFO",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCK",
                "insertText": "_BEGIN_LOCK",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCK(_Kind)",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_BEGIN_LOCK",
                "textEdit": {
                    "newText": "_BEGIN_LOCK",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH",
                "insertText": "_CATCH",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_CATCH(x)",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_CATCH",
                "textEdit": {
                    "newText": "_CATCH",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_ALL",
                "insertText": "_CATCH_ALL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_ALL",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_CATCH_ALL",
                "textEdit": {
                    "newText": "_CATCH_ALL",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_END",
                "insertText": "_CATCH_END",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_END",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_CATCH_END",
                "textEdit": {
                    "newText": "_CATCH_END",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_CLANG_CONSTEXPR20",
                "insertText": "_CLANG_CONSTEXPR20",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CLANG_CONSTEXPR20",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_CLANG_CONSTEXPR20",
                "textEdit": {
                    "newText": "_CLANG_CONSTEXPR20",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_CONTAINER_EMPLACE_RETURN",
                "insertText": "_CONTAINER_EMPLACE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CONTAINER_EMPLACE_RETURN",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_CONTAINER_EMPLACE_RETURN",
                "textEdit": {
                    "newText": "_CONTAINER_EMPLACE_RETURN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTDATA2_IMPORT",
                "insertText": "_CRTDATA2_IMPORT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTDATA2_IMPORT",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_CRTDATA2_IMPORT",
                "textEdit": {
                    "newText": "_CRTDATA2_IMPORT",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_IMPORT",
                "insertText": "_CRTIMP2_IMPORT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_IMPORT",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_CRTIMP2_IMPORT",
                "textEdit": {
                    "newText": "_CRTIMP2_IMPORT",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_PURE",
                "insertText": "_CRTIMP2_PURE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_PURE",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_CRTIMP2_PURE",
                "textEdit": {
                    "newText": "_CRTIMP2_PURE",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_PURE_IMPORT",
                "insertText": "_CRTIMP2_PURE_IMPORT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_PURE_IMPORT",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_CRTIMP2_PURE_IMPORT",
                "textEdit": {
                    "newText": "_CRTIMP2_PURE_IMPORT",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "insertText": "_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "textEdit": {
                    "newText": "_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRT_MSVCP_CURRENT",
                "insertText": "_CRT_MSVCP_CURRENT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRT_MSVCP_CURRENT",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_CRT_MSVCP_CURRENT",
                "textEdit": {
                    "newText": "_CRT_MSVCP_CURRENT",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_END_LOCINFO",
                "insertText": "_END_LOCINFO",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_END_LOCINFO()",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_END_LOCINFO",
                "textEdit": {
                    "newText": "_END_LOCINFO",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_END_LOCK",
                "insertText": "_END_LOCK",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_END_LOCK()",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_END_LOCK",
                "textEdit": {
                    "newText": "_END_LOCK",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_GET_PROXY_ALLOCATOR",
                "insertText": "_GET_PROXY_ALLOCATOR",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_GET_PROXY_ALLOCATOR(_Alty, _Al)",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_GET_PROXY_ALLOCATOR",
                "textEdit": {
                    "newText": "_GET_PROXY_ALLOCATOR",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_HAS_ITERATOR_DEBUGGING",
                "insertText": "_HAS_ITERATOR_DEBUGGING",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_HAS_ITERATOR_DEBUGGING",
                "score": 0.5160610675811768,
                "sortText": "40fbe36c_HAS_ITERATOR_DEBUGGING",
                "textEdit": {
                    "newText": "_HAS_ITERATOR_DEBUGGING",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 12
                        },
                        "start": {
                            "character": 7,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "ovl_no_viable_oper",
                "message": "No viable overloaded '='\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\istream:64:39:\nnote: candidate function not viable: no known conversion from 'int' to 'basic_istream<char>' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\istream:76:39:\nnote: candidate function not viable: no known conversion from 'int' to 'const basic_istream<char>' for 1st argument",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 13
                    },
                    "start": {
                        "character": 6,
                        "line": 13
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 54
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=13, column=6, column_end = 7, message=No viable overloaded '='

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\istream:64:39:
note: candidate function not viable: no known conversion from 'int' to 'basic_istream<char>' for 1st argument

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\istream:76:39:
note: candidate function not viable: no known conversion from 'int' to 'const basic_istream<char>' for 1st argument)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.437286376953125,
                "sortText": "3f7201c0integer1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.437286376953125,
                "sortText": "3f7201c0integer2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.5021395683288574,
                "sortText": "3f9fdcf2x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.9921669960021973,
                "sortText": "400100acmain",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.466963291168213,
                "sortText": "40443a8cstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dcin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.8851884603500366,
                "sortText": "409d644aSETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.8851884603500366,
                "sortText": "409d644asize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.885036051273346,
                "sortText": "409d6e47auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.885036051273346,
                "sortText": "409d6e47bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.885036051273346,
                "sortText": "409d6e47char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.885036051273346,
                "sortText": "409d6e47class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.885036051273346,
                "sortText": "409d6e47const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.885036051273346,
                "sortText": "409d6e47double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.885036051273346,
                "sortText": "409d6e47enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.885036051273346,
                "sortText": "409d6e47false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.885036051273346,
                "sortText": "409d6e47float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.885036051273346,
                "sortText": "409d6e47int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.885036051273346,
                "sortText": "409d6e47long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.885036051273346,
                "sortText": "409d6e47nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.885036051273346,
                "sortText": "409d6e47operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.885036051273346,
                "sortText": "409d6e47short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.885036051273346,
                "sortText": "409d6e47signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.885036051273346,
                "sortText": "409d6e47struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.885036051273346,
                "sortText": "409d6e47true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.885036051273346,
                "sortText": "409d6e47typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.885036051273346,
                "sortText": "409d6e47union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.885036051273346,
                "sortText": "409d6e47unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.885036051273346,
                "sortText": "409d6e47void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.885036051273346,
                "sortText": "409d6e47volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96type_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "pair<Ty *, ptrdiff_t>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "get_temporary_buffer",
                "insertText": "get_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_temporary_buffer<class Ty>(ptrdiff_t Count)",
                "score": 0.6375089883804321,
                "sortText": "40dccc36get_temporary_buffer",
                "textEdit": {
                    "newText": "get_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove",
                "insertText": "remove",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove(FwdIt First, const FwdIt Last, const Ty &Val)",
                "score": 0.6375089883804321,
                "sortText": "40dccc36remove",
                "textEdit": {
                    "newText": "remove",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove_if",
                "insertText": "remove_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove_if(FwdIt First, const FwdIt Last, Pr Pred)",
                "score": 0.6375089883804321,
                "sortText": "40dccc36remove_if",
                "textEdit": {
                    "newText": "remove_if",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "NoThrowFwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_copy",
                "insertText": "uninitialized_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_copy(const InIt First, const InIt Last, NoThrowFwdIt Dest)",
                "score": 0.6375089883804321,
                "sortText": "40dccc36uninitialized_copy",
                "textEdit": {
                    "newText": "uninitialized_copy",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_argv_mode",
                "insertText": "_crt_argv_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_argv_mode",
                "score": 0.5959954857826233,
                "sortText": "40e76cd7_crt_argv_mode",
                "textEdit": {
                    "newText": "_crt_argv_mode",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.5959954857826233,
                "sortText": "40e76cd7_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.5959954857826233,
                "sortText": "40e76cd7_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.5953468680381775,
                "sortText": "40e79759CancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.5953468680381775,
                "sortText": "40e79759cancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.5953468680381775,
                "sortText": "40e79759cancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.5953468680381775,
                "sortText": "40e79759cancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "align",
                "insertText": "align",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022align(size_t Bound, size_t Size, void *&Ptr, size_t &Space)",
                "score": 0.5496048927307129,
                "sortText": "40f34d18align",
                "textEdit": {
                    "newText": "align",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "notify_all_at_thread_exit",
                "insertText": "notify_all_at_thread_exit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022notify_all_at_thread_exit(condition_variable &Cnd, unique_lock<mutex> Lck)",
                "score": 0.5496048927307129,
                "sortText": "40f34d18notify_all_at_thread_exit",
                "textEdit": {
                    "newText": "notify_all_at_thread_exit",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const allocator<Ty> &, const allocator<Other> &)",
                "score": 0.5496048927307129,
                "sortText": "40f34d18operator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const allocator<Ty> &, const allocator<Other> &)",
                "score": 0.5496048927307129,
                "sortText": "40f34d18operator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "return_temporary_buffer",
                "insertText": "return_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022return_temporary_buffer(Ty *Pbuf)",
                "score": 0.5496048927307129,
                "sortText": "40f34d18return_temporary_buffer",
                "textEdit": {
                    "newText": "return_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_fill",
                "insertText": "uninitialized_fill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_fill(const NoThrowFwdIt First, const NoThrowFwdIt Last, const Tval &Val)",
                "score": 0.5496048927307129,
                "sortText": "40f34d18uninitialized_fill",
                "textEdit": {
                    "newText": "uninitialized_fill",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_ADAPTOR_EMPLACE_RETURN",
                "insertText": "_ADAPTOR_EMPLACE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ADAPTOR_EMPLACE_RETURN",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_ADAPTOR_EMPLACE_RETURN",
                "textEdit": {
                    "newText": "_ADAPTOR_EMPLACE_RETURN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCINFO",
                "insertText": "_BEGIN_LOCINFO",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCINFO(_VarName)",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_BEGIN_LOCINFO",
                "textEdit": {
                    "newText": "_BEGIN_LOCINFO",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCK",
                "insertText": "_BEGIN_LOCK",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCK(_Kind)",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_BEGIN_LOCK",
                "textEdit": {
                    "newText": "_BEGIN_LOCK",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH",
                "insertText": "_CATCH",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_CATCH(x)",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_CATCH",
                "textEdit": {
                    "newText": "_CATCH",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_ALL",
                "insertText": "_CATCH_ALL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_ALL",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_CATCH_ALL",
                "textEdit": {
                    "newText": "_CATCH_ALL",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_END",
                "insertText": "_CATCH_END",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_END",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_CATCH_END",
                "textEdit": {
                    "newText": "_CATCH_END",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_CLANG_CONSTEXPR20",
                "insertText": "_CLANG_CONSTEXPR20",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CLANG_CONSTEXPR20",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_CLANG_CONSTEXPR20",
                "textEdit": {
                    "newText": "_CLANG_CONSTEXPR20",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_CONTAINER_EMPLACE_RETURN",
                "insertText": "_CONTAINER_EMPLACE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CONTAINER_EMPLACE_RETURN",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_CONTAINER_EMPLACE_RETURN",
                "textEdit": {
                    "newText": "_CONTAINER_EMPLACE_RETURN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTDATA2_IMPORT",
                "insertText": "_CRTDATA2_IMPORT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTDATA2_IMPORT",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_CRTDATA2_IMPORT",
                "textEdit": {
                    "newText": "_CRTDATA2_IMPORT",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_IMPORT",
                "insertText": "_CRTIMP2_IMPORT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_IMPORT",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_CRTIMP2_IMPORT",
                "textEdit": {
                    "newText": "_CRTIMP2_IMPORT",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_PURE",
                "insertText": "_CRTIMP2_PURE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_PURE",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_CRTIMP2_PURE",
                "textEdit": {
                    "newText": "_CRTIMP2_PURE",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_PURE_IMPORT",
                "insertText": "_CRTIMP2_PURE_IMPORT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_PURE_IMPORT",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_CRTIMP2_PURE_IMPORT",
                "textEdit": {
                    "newText": "_CRTIMP2_PURE_IMPORT",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "insertText": "_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "textEdit": {
                    "newText": "_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRT_MSVCP_CURRENT",
                "insertText": "_CRT_MSVCP_CURRENT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRT_MSVCP_CURRENT",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_CRT_MSVCP_CURRENT",
                "textEdit": {
                    "newText": "_CRT_MSVCP_CURRENT",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_END_LOCINFO",
                "insertText": "_END_LOCINFO",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_END_LOCINFO()",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_END_LOCINFO",
                "textEdit": {
                    "newText": "_END_LOCINFO",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_END_LOCK",
                "insertText": "_END_LOCK",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_END_LOCK()",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_END_LOCK",
                "textEdit": {
                    "newText": "_END_LOCK",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_GET_PROXY_ALLOCATOR",
                "insertText": "_GET_PROXY_ALLOCATOR",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_GET_PROXY_ALLOCATOR(_Alty, _Al)",
                "score": 0.4881982207298279,
                "sortText": "41060ae2_GET_PROXY_ALLOCATOR",
                "textEdit": {
                    "newText": "_GET_PROXY_ALLOCATOR",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 12
                        },
                        "start": {
                            "character": 8,
                            "line": 12
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 13
                    },
                    "start": {
                        "character": 4,
                        "line": 13
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 56
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=13, column=4, column_end = 5, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 58
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 3.84757924079895,
                "sortText": "3f89c143integer1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 2.948925256729126,
                "sortText": "3fc344cfinteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 2.948925256729126,
                "sortText": "3fc344cfx",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.9800145626068115,
                "sortText": "40851dc4SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4mbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.7880699634552002,
                "sortText": "40b6410ccin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.73712557554245,
                "sortText": "40c34bbd_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdbasic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdbasic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdbasic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdbasic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdchar_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "fpos",
                "insertText": "fpos",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " fpos<class Statetype>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdfpos",
                "textEdit": {
                    "newText": "fpos",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "ios_base",
                "insertText": "ios_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ios_base",
                "score": 0.73712557554245,
                "sortText": "40c34bbdios_base",
                "textEdit": {
                    "newText": "ios_base",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "istreambuf_iterator",
                "insertText": "istreambuf_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " istreambuf_iterator<class Elem, class Traits>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdistreambuf_iterator",
                "textEdit": {
                    "newText": "istreambuf_iterator",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "num_get",
                "insertText": "num_get",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " num_get<class Elem, class InIt>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdnum_get",
                "textEdit": {
                    "newText": "num_get",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.73712557554245,
                "sortText": "40c34bbdtype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_argv_mode",
                "insertText": "_crt_argv_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_argv_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_argv_mode",
                "textEdit": {
                    "newText": "_crt_argv_mode",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 13
                        },
                        "start": {
                            "character": 17,
                            "line": 13
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 66
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 72
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected expression)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.381287097930908,
                "sortText": "3f73cc7finteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.381287097930908,
                "sortText": "3f73cc7finteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.423351287841797,
                "sortText": "3fa4e7d0x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 2.8783247470855713,
                "sortText": "3fc7c987cout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.513861060142517,
                "sortText": "403e39cdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.353448510169983,
                "sortText": "4052c233main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.960056483745575,
                "sortText": "408a39bdcerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.960056483745575,
                "sortText": "408a39bdclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.911510169506073,
                "sortText": "4096a745cin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " is_error_code_enum_v<class Ty>",
                "score": 0.911510169506073,
                "sortText": "4096a745is_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 0.8251751661300659,
                "sortText": "40acc152error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.7135143280029297,
                "sortText": "40c95720SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720mbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6298295259475708,
                "sortText": "40dec37e_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.6298295259475708,
                "sortText": "40dec37echar_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ectype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if",
                "insertText": "enable_if",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " enable_if<bool Test, class Ty>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eenable_if",
                "textEdit": {
                    "newText": "enable_if",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if_t",
                "insertText": "enable_if_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " enable_if_t<bool Test, class Ty>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eenable_if_t",
                "textEdit": {
                    "newText": "enable_if_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.6298295259475708,
                "sortText": "40dec37eerror_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "fpos",
                "insertText": "fpos",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " fpos<class Statetype>",
                "score": 0.6298295259475708,
                "sortText": "40dec37efpos",
                "textEdit": {
                    "newText": "fpos",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "integral_constant",
                "insertText": "integral_constant",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " integral_constant<class Ty, Ty Val>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eintegral_constant",
                "textEdit": {
                    "newText": "integral_constant",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ios_base",
                "insertText": "ios_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ios_base",
                "score": 0.6298295259475708,
                "sortText": "40dec37eios_base",
                "textEdit": {
                    "newText": "ios_base",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum",
                "insertText": "is_error_code_enum",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " is_error_code_enum<class Enum>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eis_error_code_enum",
                "textEdit": {
                    "newText": "is_error_code_enum",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "istreambuf_iterator",
                "insertText": "istreambuf_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " istreambuf_iterator<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eistreambuf_iterator",
                "textEdit": {
                    "newText": "istreambuf_iterator",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "num_get",
                "insertText": "num_get",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " num_get<class Elem, class InIt>",
                "score": 0.6298295259475708,
                "sortText": "40dec37enum_get",
                "textEdit": {
                    "newText": "num_get",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "num_put",
                "insertText": "num_put",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " num_put<class Elem, class OutIt>",
                "score": 0.6298295259475708,
                "sortText": "40dec37enum_put",
                "textEdit": {
                    "newText": "num_put",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 74
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected expression)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Winvalid-pp-token",
                "message": "Missing terminating '\"' character",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 15
                    },
                    "start": {
                        "character": 15,
                        "line": 15
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 15
                    },
                    "start": {
                        "character": 15,
                        "line": 15
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 80
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=15, column=15, column_end = 16, message=Expected expression)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 82
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Winvalid-pp-token",
                "message": "Missing terminating '\"' character",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 15
                    },
                    "start": {
                        "character": 15,
                        "line": 15
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 15
                    },
                    "start": {
                        "character": 15,
                        "line": 15
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 84
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=15, column=15, column_end = 16, message=Expected expression)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Winvalid-pp-token",
                "message": "Missing terminating '\"' character",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 15
                    },
                    "start": {
                        "character": 15,
                        "line": 15
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 15
                    },
                    "start": {
                        "character": 15,
                        "line": 15
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 90
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=15, column=15, column_end = 17, message=Expected expression)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 96
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 102
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected expression)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 104
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 114
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected expression)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.381287097930908,
                "sortText": "3f73cc7finteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.381287097930908,
                "sortText": "3f73cc7finteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.423351287841797,
                "sortText": "3fa4e7d0x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 2.8783247470855713,
                "sortText": "3fc7c987cout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.513861060142517,
                "sortText": "403e39cdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.353448510169983,
                "sortText": "4052c233main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.960056483745575,
                "sortText": "408a39bdcerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.960056483745575,
                "sortText": "408a39bdclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.911510169506073,
                "sortText": "4096a745cin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " is_error_code_enum_v<class Ty>",
                "score": 0.911510169506073,
                "sortText": "4096a745is_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 0.8251751661300659,
                "sortText": "40acc152error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.7135143280029297,
                "sortText": "40c95720SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720mbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6298295259475708,
                "sortText": "40dec37e_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.6298295259475708,
                "sortText": "40dec37echar_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ectype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if",
                "insertText": "enable_if",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " enable_if<bool Test, class Ty>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eenable_if",
                "textEdit": {
                    "newText": "enable_if",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if_t",
                "insertText": "enable_if_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " enable_if_t<bool Test, class Ty>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eenable_if_t",
                "textEdit": {
                    "newText": "enable_if_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.6298295259475708,
                "sortText": "40dec37eerror_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "fpos",
                "insertText": "fpos",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " fpos<class Statetype>",
                "score": 0.6298295259475708,
                "sortText": "40dec37efpos",
                "textEdit": {
                    "newText": "fpos",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "integral_constant",
                "insertText": "integral_constant",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " integral_constant<class Ty, Ty Val>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eintegral_constant",
                "textEdit": {
                    "newText": "integral_constant",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ios_base",
                "insertText": "ios_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ios_base",
                "score": 0.6298295259475708,
                "sortText": "40dec37eios_base",
                "textEdit": {
                    "newText": "ios_base",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum",
                "insertText": "is_error_code_enum",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " is_error_code_enum<class Enum>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eis_error_code_enum",
                "textEdit": {
                    "newText": "is_error_code_enum",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "istreambuf_iterator",
                "insertText": "istreambuf_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " istreambuf_iterator<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eistreambuf_iterator",
                "textEdit": {
                    "newText": "istreambuf_iterator",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "num_get",
                "insertText": "num_get",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " num_get<class Elem, class InIt>",
                "score": 0.6298295259475708,
                "sortText": "40dec37enum_get",
                "textEdit": {
                    "newText": "num_get",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "num_put",
                "insertText": "num_put",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " num_put<class Elem, class OutIt>",
                "score": 0.6298295259475708,
                "sortText": "40dec37enum_put",
                "textEdit": {
                    "newText": "num_put",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 116
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected expression)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.5021395683288574,
                "sortText": "3f9fdcf2x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.9921669960021973,
                "sortText": "400100acmain",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.466963291168213,
                "sortText": "40443a8cstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.0881673097610474,
                "sortText": "4074b6efcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dcin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " is_error_code_enum_v<class Ty>",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dis_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 0.9007225036621094,
                "sortText": "40996a40error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.8851884603500366,
                "sortText": "409d644aSETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.8851884603500366,
                "sortText": "409d644ambstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.8851884603500366,
                "sortText": "409d644asize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.885036051273346,
                "sortText": "409d6e47auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.885036051273346,
                "sortText": "409d6e47bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.885036051273346,
                "sortText": "409d6e47char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.885036051273346,
                "sortText": "409d6e47class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.885036051273346,
                "sortText": "409d6e47const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.885036051273346,
                "sortText": "409d6e47double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.885036051273346,
                "sortText": "409d6e47enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.885036051273346,
                "sortText": "409d6e47false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.885036051273346,
                "sortText": "409d6e47float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.885036051273346,
                "sortText": "409d6e47int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.885036051273346,
                "sortText": "409d6e47long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.885036051273346,
                "sortText": "409d6e47nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.885036051273346,
                "sortText": "409d6e47operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.885036051273346,
                "sortText": "409d6e47short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.885036051273346,
                "sortText": "409d6e47signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.885036051273346,
                "sortText": "409d6e47struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.885036051273346,
                "sortText": "409d6e47true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.885036051273346,
                "sortText": "409d6e47typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.885036051273346,
                "sortText": "409d6e47union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.885036051273346,
                "sortText": "409d6e47unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.885036051273346,
                "sortText": "409d6e47void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.885036051273346,
                "sortText": "409d6e47volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96ctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if",
                "insertText": "enable_if",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " enable_if<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if",
                "textEdit": {
                    "newText": "enable_if",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if_t",
                "insertText": "enable_if_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " enable_if_t<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if_t",
                "textEdit": {
                    "newText": "enable_if_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 118
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 120
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 126
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.5021395683288574,
                "sortText": "3f9fdcf2x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.9921669960021973,
                "sortText": "400100acmain",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.466963291168213,
                "sortText": "40443a8cstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.0881673097610474,
                "sortText": "4074b6efcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dcin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " is_error_code_enum_v<class Ty>",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dis_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 0.9007225036621094,
                "sortText": "40996a40error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.8851884603500366,
                "sortText": "409d644aSETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.8851884603500366,
                "sortText": "409d644ambstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.8851884603500366,
                "sortText": "409d644asize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.885036051273346,
                "sortText": "409d6e47auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.885036051273346,
                "sortText": "409d6e47bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.885036051273346,
                "sortText": "409d6e47char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.885036051273346,
                "sortText": "409d6e47class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.885036051273346,
                "sortText": "409d6e47const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.885036051273346,
                "sortText": "409d6e47double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.885036051273346,
                "sortText": "409d6e47enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.885036051273346,
                "sortText": "409d6e47false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.885036051273346,
                "sortText": "409d6e47float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.885036051273346,
                "sortText": "409d6e47int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.885036051273346,
                "sortText": "409d6e47long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.885036051273346,
                "sortText": "409d6e47nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.885036051273346,
                "sortText": "409d6e47operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.885036051273346,
                "sortText": "409d6e47short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.885036051273346,
                "sortText": "409d6e47signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.885036051273346,
                "sortText": "409d6e47struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.885036051273346,
                "sortText": "409d6e47true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.885036051273346,
                "sortText": "409d6e47typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.885036051273346,
                "sortText": "409d6e47union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.885036051273346,
                "sortText": "409d6e47unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.885036051273346,
                "sortText": "409d6e47void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.885036051273346,
                "sortText": "409d6e47volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96ctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if",
                "insertText": "enable_if",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " enable_if<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if",
                "textEdit": {
                    "newText": "enable_if",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if_t",
                "insertText": "enable_if_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " enable_if_t<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if_t",
                "textEdit": {
                    "newText": "enable_if_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 128
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected expression)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.5021395683288574,
                "sortText": "3f9fdcf2x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.9921669960021973,
                "sortText": "400100acmain",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.466963291168213,
                "sortText": "40443a8cstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.0881673097610474,
                "sortText": "4074b6efcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dcin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " is_error_code_enum_v<class Ty>",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dis_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 0.9007225036621094,
                "sortText": "40996a40error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.8851884603500366,
                "sortText": "409d644aSETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.8851884603500366,
                "sortText": "409d644ambstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.8851884603500366,
                "sortText": "409d644asize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.885036051273346,
                "sortText": "409d6e47auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.885036051273346,
                "sortText": "409d6e47bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.885036051273346,
                "sortText": "409d6e47char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.885036051273346,
                "sortText": "409d6e47class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.885036051273346,
                "sortText": "409d6e47const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.885036051273346,
                "sortText": "409d6e47double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.885036051273346,
                "sortText": "409d6e47enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.885036051273346,
                "sortText": "409d6e47false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.885036051273346,
                "sortText": "409d6e47float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.885036051273346,
                "sortText": "409d6e47int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.885036051273346,
                "sortText": "409d6e47long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.885036051273346,
                "sortText": "409d6e47nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.885036051273346,
                "sortText": "409d6e47operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.885036051273346,
                "sortText": "409d6e47short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.885036051273346,
                "sortText": "409d6e47signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.885036051273346,
                "sortText": "409d6e47struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.885036051273346,
                "sortText": "409d6e47true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.885036051273346,
                "sortText": "409d6e47typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.885036051273346,
                "sortText": "409d6e47union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.885036051273346,
                "sortText": "409d6e47unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.885036051273346,
                "sortText": "409d6e47void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.885036051273346,
                "sortText": "409d6e47volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96ctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if",
                "insertText": "enable_if",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " enable_if<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if",
                "textEdit": {
                    "newText": "enable_if",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if_t",
                "insertText": "enable_if_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " enable_if_t<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if_t",
                "textEdit": {
                    "newText": "enable_if_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 130
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected ';' after expression (fix available))]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 132
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 1,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 2,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 140
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=17, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=17, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.5021395683288574,
                "sortText": "3f1fdcf2x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "ctype_base::(unnamed)",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "xdigit",
                "insertText": "ctype_base::xdigit",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ctype_base::xdigit",
                "score": 0.39874669909477234,
                "sortText": "4133d779xdigit",
                "textEdit": {
                    "newText": "ctype_base::xdigit",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <wchar.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "unsigned int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <wchar.h>"
                },
                "filterText": "xbegin",
                "insertText": "xbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022xbegin()",
                "score": 0.38926464319229126,
                "sortText": "4138b24exbegin",
                "textEdit": {
                    "newText": "xbegin",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <wchar.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "short",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <wchar.h>"
                },
                "filterText": "_InterlockedXor16_np",
                "insertText": "_InterlockedXor16_np",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_InterlockedXor16_np(volatile short *Value, short Mask)",
                "score": 0.24792945384979248,
                "sortText": "80000000_InterlockedXor16_np",
                "textEdit": {
                    "newText": "_InterlockedXor16_np",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <wchar.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <wchar.h>"
                },
                "filterText": "_InterlockedXor64_np",
                "insertText": "_InterlockedXor64_np",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_InterlockedXor64_np(volatile long long *Value, long long Mask)",
                "score": 0.24792945384979248,
                "sortText": "80000000_InterlockedXor64_np",
                "textEdit": {
                    "newText": "_InterlockedXor64_np",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <wchar.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "char",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <wchar.h>"
                },
                "filterText": "_InterlockedXor8_np",
                "insertText": "_InterlockedXor8_np",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_InterlockedXor8_np(volatile char *Value, char Mask)",
                "score": 0.24792945384979248,
                "sortText": "80000000_InterlockedXor8_np",
                "textEdit": {
                    "newText": "_InterlockedXor8_np",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <wchar.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <wchar.h>"
                },
                "filterText": "_InterlockedXor_np",
                "insertText": "_InterlockedXor_np",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_InterlockedXor_np(volatile long *Value, long Mask)",
                "score": 0.24792945384979248,
                "sortText": "80000000_InterlockedXor_np",
                "textEdit": {
                    "newText": "_InterlockedXor_np",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m256i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm256_xor_epi32",
                "insertText": "_mm256_xor_epi32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm256_xor_epi32(__m256i a, __m256i b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm256_xor_epi32",
                "textEdit": {
                    "newText": "_mm256_xor_epi32",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m256i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm256_xor_epi64",
                "insertText": "_mm256_xor_epi64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm256_xor_epi64(__m256i a, __m256i b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm256_xor_epi64",
                "textEdit": {
                    "newText": "_mm256_xor_epi64",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m256d",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nPerforms a bitwise XOR of two 256-bit vectors of [4 x double].\n\\headerfile <x86intrin.h>\nThis intrinsic corresponds to the <c> VXORPD </c> instruction.\n\\param __a A 256-bit vector of [4 x double] containing one of the source operands.\n\\param __b A 256-bit vector of [4 x double] containing one of the source operands.\n\\returns A 256-bit vector of [4 x double] containing the bitwise XOR of the values between both operands."
                },
                "filterText": "_mm256_xor_pd",
                "insertText": "_mm256_xor_pd",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm256_xor_pd(__m256d a, __m256d b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm256_xor_pd",
                "textEdit": {
                    "newText": "_mm256_xor_pd",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m256",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nPerforms a bitwise XOR of two 256-bit vectors of [8 x float].\n\\headerfile <x86intrin.h>\nThis intrinsic corresponds to the <c> VXORPS </c> instruction.\n\\param __a A 256-bit vector of [8 x float] containing one of the source operands.\n\\param __b A 256-bit vector of [8 x float] containing one of the source operands.\n\\returns A 256-bit vector of [8 x float] containing the bitwise XOR of the values between both operands."
                },
                "filterText": "_mm256_xor_ps",
                "insertText": "_mm256_xor_ps",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm256_xor_ps(__m256 a, __m256 b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm256_xor_ps",
                "textEdit": {
                    "newText": "_mm256_xor_ps",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m256i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nComputes the bitwise XOR of the 256-bit integer vectors in \\a __a and\n\\a __b.\n\\headerfile <immintrin.h>\nThis intrinsic corresponds to the \\c VPXOR instruction.\n\\param __a A 256-bit integer vector.\n\\param __b A 256-bit integer vector.\n\\returns A 256-bit integer vector containing the result."
                },
                "filterText": "_mm256_xor_si256",
                "insertText": "_mm256_xor_si256",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm256_xor_si256(__m256i a, __m256i b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm256_xor_si256",
                "textEdit": {
                    "newText": "_mm256_xor_si256",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm512_xor_epi32",
                "insertText": "_mm512_xor_epi32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm512_xor_epi32(__m512i a, __m512i b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm512_xor_epi32",
                "textEdit": {
                    "newText": "_mm512_xor_epi32",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm512_xor_epi64",
                "insertText": "_mm512_xor_epi64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm512_xor_epi64(__m512i a, __m512i b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm512_xor_epi64",
                "textEdit": {
                    "newText": "_mm512_xor_epi64",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512d",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm512_xor_pd",
                "insertText": "_mm512_xor_pd",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm512_xor_pd(__m512d A, __m512d B)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm512_xor_pd",
                "textEdit": {
                    "newText": "_mm512_xor_pd",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm512_xor_ps",
                "insertText": "_mm512_xor_ps",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm512_xor_ps(__m512 A, __m512 B)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm512_xor_ps",
                "textEdit": {
                    "newText": "_mm512_xor_ps",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m512i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm512_xor_si512",
                "insertText": "_mm512_xor_si512",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm512_xor_si512(__m512i a, __m512i b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm512_xor_si512",
                "textEdit": {
                    "newText": "_mm512_xor_si512",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m128i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_xor_epi32",
                "insertText": "_mm_xor_epi32",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_xor_epi32(__m128i a, __m128i b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm_xor_epi32",
                "textEdit": {
                    "newText": "_mm_xor_epi32",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m128i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_mm_xor_epi64",
                "insertText": "_mm_xor_epi64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_xor_epi64(__m128i a, __m128i b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm_xor_epi64",
                "textEdit": {
                    "newText": "_mm_xor_epi64",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <emmintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m128d",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <emmintrin.h>\nPerforms a bitwise XOR of two 128-bit vectors of [2 x double].\n\\headerfile <x86intrin.h>\nThis intrinsic corresponds to the <c> VPXOR / PXOR </c> instruction.\n\\param __a A 128-bit vector of [2 x double] containing one of the source operands.\n\\param __b A 128-bit vector of [2 x double] containing one of the source operands.\n\\returns A 128-bit vector of [2 x double] containing the bitwise XOR of the values between both operands."
                },
                "filterText": "_mm_xor_pd",
                "insertText": "_mm_xor_pd",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_xor_pd(__m128d a, __m128d b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm_xor_pd",
                "textEdit": {
                    "newText": "_mm_xor_pd",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmmintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "__m128",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmmintrin.h>\nPerforms a bitwise exclusive OR of two 128-bit vectors of [4 x float].\n\\headerfile <x86intrin.h>\nThis intrinsic corresponds to the <c> VXORPS / XORPS </c> instructions.\n\\param __a A 128-bit vector of [4 x float] containing one of the source operands.\n\\param __b A 128-bit vector of [4 x float] containing one of the source operands.\n\\returns A 128-bit vector of [4 x float] containing the bitwise exclusive OR of the values between both operands."
                },
                "filterText": "_mm_xor_ps",
                "insertText": "_mm_xor_ps",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_xor_ps(__m128 a, __m128 b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm_xor_ps",
                "textEdit": {
                    "newText": "_mm_xor_ps",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <emmintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "__m128i",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <emmintrin.h>\nPerforms a bitwise exclusive OR of two 128-bit integer vectors.\n\\headerfile <x86intrin.h>\nThis intrinsic corresponds to the <c> VPXOR / PXOR </c> instruction.\n\\param __a A 128-bit integer vector containing one of the source operands.\n\\param __b A 128-bit integer vector containing one of the source operands.\n\\returns A 128-bit integer vector containing the bitwise exclusive OR of the values in both operands."
                },
                "filterText": "_mm_xor_si128",
                "insertText": "_mm_xor_si128",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_xor_si128(__m128i a, __m128i b)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm_xor_si128",
                "textEdit": {
                    "newText": "_mm_xor_si128",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mmintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "__m64",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mmintrin.h>\nPerforms a bitwise exclusive OR of two 64-bit integer vectors.\n\\headerfile <x86intrin.h>\nThis intrinsic corresponds to the <c> PXOR </c> instruction.\n\\param __m1 A 64-bit integer vector.\n\\param __m2 A 64-bit integer vector.\n\\returns A 64-bit integer vector containing the bitwise exclusive OR of both parameters."
                },
                "filterText": "_mm_xor_si64",
                "insertText": "_mm_xor_si64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mm_xor_si64(__m64 m1, __m64 m2)",
                "score": 0.38926464319229126,
                "sortText": "80000000_mm_xor_si64",
                "textEdit": {
                    "newText": "_mm_xor_si64",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_xbegin",
                "insertText": "_xbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_xbegin()",
                "score": 0.38926464319229126,
                "sortText": "80000000_xbegin",
                "textEdit": {
                    "newText": "_xbegin",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <wchar.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <wchar.h>"
                },
                "filterText": "_xend",
                "insertText": "_xend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_xend()",
                "score": 0.38926464319229126,
                "sortText": "80000000_xend",
                "textEdit": {
                    "newText": "_xend",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nMarks the end of an TSX (RTM) suspend load address tracking region. If this intrinsic is used inside a suspend load address tracking region it will end the suspend region and all following load addresses will be added to the transaction read set. If it's used inside an active transaction but not in a suspend region it will cause transaction abort. If it's used outside of a transactional region it behaves like a NOP.\n\\headerfile <x86intrin.h>\nThis intrinsic corresponds to the \\c XRESLDTRK instruction."
                },
                "filterText": "_xresldtrk",
                "insertText": "_xresldtrk",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_xresldtrk()",
                "score": 0.38926464319229126,
                "sortText": "80000000_xresldtrk",
                "textEdit": {
                    "newText": "_xresldtrk",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nPerforms a full or partial save of processor state to the memory at\n\\a __p. The exact state saved depends on the 64-bit mask \\a __m and processor control register \\c XCR0.\n\\code{.operation} mask[62:0] := __m[62:0] AND XCR0[62:0] FOR i := 0 TO 62 IF mask[i] == 1 CASE (i) OF 0: save X87 FPU state 1: save SSE state DEFAULT: __p.Ext_Save_Area[i] := ProcessorState[i] FI ENDFOR __p.Header.XSTATE_BV[62:0] := INIT_FUNCTION(mask[62:0])\n\\endcode\n\\headerfile <immintrin.h>\nThis intrinsic corresponds to the \\c XSAVEC instruction.\n\\param __p Pointer to the save area; must be 64-byte aligned.\n\\param __m A 64-bit mask indicating what state should be saved."
                },
                "filterText": "_xsavec",
                "insertText": "_xsavec",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_xsavec(void *p, unsigned long long m)",
                "score": 0.38926464319229126,
                "sortText": "80000000_xsavec",
                "textEdit": {
                    "newText": "_xsavec",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nPerforms a full or partial save of processor state to the memory at\n\\a __p. The exact state saved depends on the 64-bit mask \\a __m and processor control register \\c XCR0.\n\\code{.operation} mask[62:0] := __m[62:0] AND XCR0[62:0] FOR i := 0 TO 62 IF mask[i] == 1 CASE (i) OF 0: save X87 FPU state 1: save SSE state DEFAULT: __p.Ext_Save_Area[i] := ProcessorState[i] FI ENDFOR __p.Header.XSTATE_BV[62:0] := INIT_FUNCTION(mask[62:0])\n\\endcode\n\\headerfile <immintrin.h>\nThis intrinsic corresponds to the \\c XSAVEC64 instruction.\n\\param __p Pointer to the save area; must be 64-byte aligned.\n\\param __m A 64-bit mask indicating what state should be saved."
                },
                "filterText": "_xsavec64",
                "insertText": "_xsavec64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_xsavec64(void *p, unsigned long long m)",
                "score": 0.38926464319229126,
                "sortText": "80000000_xsavec64",
                "textEdit": {
                    "newText": "_xsavec64",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_xsaveopt",
                "insertText": "_xsaveopt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_xsaveopt(void *p, unsigned long long m)",
                "score": 0.38926464319229126,
                "sortText": "80000000_xsaveopt",
                "textEdit": {
                    "newText": "_xsaveopt",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>"
                },
                "filterText": "_xsaveopt64",
                "insertText": "_xsaveopt64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_xsaveopt64(void *p, unsigned long long m)",
                "score": 0.38926464319229126,
                "sortText": "80000000_xsaveopt64",
                "textEdit": {
                    "newText": "_xsaveopt64",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nMarks the start of an TSX (RTM) suspend load address tracking region. If this intrinsic is used inside a transactional region, subsequent loads are not added to the read set of the transaction. If it's used inside a suspend load address tracking region it will cause transaction abort.\nIf it's used outside of a transactional region it behaves like a NOP.\n\\headerfile <x86intrin.h>\nThis intrinsic corresponds to the \\c XSUSLDTRK instruction."
                },
                "filterText": "_xsusldtrk",
                "insertText": "_xsusldtrk",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_xsusldtrk()",
                "score": 0.38926464319229126,
                "sortText": "80000000_xsusldtrk",
                "textEdit": {
                    "newText": "_xsusldtrk",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <immintrin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <immintrin.h>\nxtest returns non-zero if the instruction is executed within an RTM or active HLE region.\nFIXME: This can be an either or for RTM/HLE. Deal with this when HLE is supported."
                },
                "filterText": "_xtest",
                "insertText": "_xtest",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_xtest()",
                "score": 0.38926464319229126,
                "sortText": "80000000_xtest",
                "textEdit": {
                    "newText": "_xtest",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "bit_xor",
                "insertText": "bit_xor",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bit_xor<class Ty>",
                "score": 0.7424666881561279,
                "sortText": "80000000bit_xor",
                "textEdit": {
                    "newText": "bit_xor",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 1,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 2,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 142
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected ';' after expression (fix available)), Error(line=17, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=17, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.5021395683288574,
                "sortText": "3f9fdcf2x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.9921669960021973,
                "sortText": "400100acmain",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.466963291168213,
                "sortText": "40443a8cstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.0881673097610474,
                "sortText": "4074b6efcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dcin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " is_error_code_enum_v<class Ty>",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dis_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 0.9007225036621094,
                "sortText": "40996a40error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.8851884603500366,
                "sortText": "409d644aSETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.8851884603500366,
                "sortText": "409d644ambstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.8851884603500366,
                "sortText": "409d644asize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.885036051273346,
                "sortText": "409d6e47auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.885036051273346,
                "sortText": "409d6e47bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.885036051273346,
                "sortText": "409d6e47char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.885036051273346,
                "sortText": "409d6e47class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.885036051273346,
                "sortText": "409d6e47const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.885036051273346,
                "sortText": "409d6e47double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.885036051273346,
                "sortText": "409d6e47enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.885036051273346,
                "sortText": "409d6e47false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.885036051273346,
                "sortText": "409d6e47float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.885036051273346,
                "sortText": "409d6e47int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.885036051273346,
                "sortText": "409d6e47long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.885036051273346,
                "sortText": "409d6e47nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.885036051273346,
                "sortText": "409d6e47operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.885036051273346,
                "sortText": "409d6e47short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.885036051273346,
                "sortText": "409d6e47signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.885036051273346,
                "sortText": "409d6e47struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.885036051273346,
                "sortText": "409d6e47true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.885036051273346,
                "sortText": "409d6e47typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.885036051273346,
                "sortText": "409d6e47union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.885036051273346,
                "sortText": "409d6e47unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.885036051273346,
                "sortText": "409d6e47void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.885036051273346,
                "sortText": "409d6e47volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96ctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if",
                "insertText": "enable_if",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " enable_if<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if",
                "textEdit": {
                    "newText": "enable_if",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if_t",
                "insertText": "enable_if_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " enable_if_t<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if_t",
                "textEdit": {
                    "newText": "enable_if_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 15
                        },
                        "start": {
                            "character": 20,
                            "line": 15
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 1,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 2,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 144
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected expression), Error(line=17, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=17, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.381287097930908,
                "sortText": "3f73cc7finteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.381287097930908,
                "sortText": "3f73cc7finteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.423351287841797,
                "sortText": "3fa4e7d0x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 2.8783247470855713,
                "sortText": "3fc7c987cout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.513861060142517,
                "sortText": "403e39cdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.353448510169983,
                "sortText": "4052c233main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.960056483745575,
                "sortText": "408a39bdcerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.960056483745575,
                "sortText": "408a39bdclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.911510169506073,
                "sortText": "4096a745cin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " is_error_code_enum_v<class Ty>",
                "score": 0.911510169506073,
                "sortText": "4096a745is_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 0.8251751661300659,
                "sortText": "40acc152error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.7135143280029297,
                "sortText": "40c95720SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720mbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6298295259475708,
                "sortText": "40dec37e_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.6298295259475708,
                "sortText": "40dec37echar_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ectype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if",
                "insertText": "enable_if",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " enable_if<bool Test, class Ty>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eenable_if",
                "textEdit": {
                    "newText": "enable_if",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if_t",
                "insertText": "enable_if_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " enable_if_t<bool Test, class Ty>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eenable_if_t",
                "textEdit": {
                    "newText": "enable_if_t",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.6298295259475708,
                "sortText": "40dec37eerror_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "fpos",
                "insertText": "fpos",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " fpos<class Statetype>",
                "score": 0.6298295259475708,
                "sortText": "40dec37efpos",
                "textEdit": {
                    "newText": "fpos",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "integral_constant",
                "insertText": "integral_constant",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " integral_constant<class Ty, Ty Val>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eintegral_constant",
                "textEdit": {
                    "newText": "integral_constant",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ios_base",
                "insertText": "ios_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ios_base",
                "score": 0.6298295259475708,
                "sortText": "40dec37eios_base",
                "textEdit": {
                    "newText": "ios_base",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum",
                "insertText": "is_error_code_enum",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " is_error_code_enum<class Enum>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eis_error_code_enum",
                "textEdit": {
                    "newText": "is_error_code_enum",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "istreambuf_iterator",
                "insertText": "istreambuf_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " istreambuf_iterator<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eistreambuf_iterator",
                "textEdit": {
                    "newText": "istreambuf_iterator",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "num_get",
                "insertText": "num_get",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " num_get<class Elem, class InIt>",
                "score": 0.6298295259475708,
                "sortText": "40dec37enum_get",
                "textEdit": {
                    "newText": "num_get",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "num_put",
                "insertText": "num_put",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " num_put<class Elem, class OutIt>",
                "score": 0.6298295259475708,
                "sortText": "40dec37enum_put",
                "textEdit": {
                    "newText": "num_put",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 15
                        },
                        "start": {
                            "character": 19,
                            "line": 15
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 1,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 2,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 146
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected expression), Error(line=17, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=17, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 1,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 2,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 148
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected ';' after expression (fix available)), Error(line=17, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=17, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Winvalid-pp-token",
                "message": "Missing terminating '\"' character",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 15
                    },
                    "start": {
                        "character": 15,
                        "line": 15
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 15
                    },
                    "start": {
                        "character": 15,
                        "line": 15
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 1,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 2,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 150
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=15, column=15, column_end = 17, message=Expected expression), Error(line=17, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=17, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Winvalid-pp-token",
                "message": "Missing terminating '\"' character",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 15
                    },
                    "start": {
                        "character": 15,
                        "line": 15
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 15
                    },
                    "start": {
                        "character": 15,
                        "line": 15
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 1,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 2,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 152
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=15, column=15, column_end = 16, message=Expected expression), Error(line=17, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=17, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.5021395683288574,
                "sortText": "3f9fdcf2x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.9921669960021973,
                "sortText": "400100acmain",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.466963291168213,
                "sortText": "40443a8cstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.0881673097610474,
                "sortText": "4074b6efcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dcin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " is_error_code_enum_v<class Ty>",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dis_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 0.9007225036621094,
                "sortText": "40996a40error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.8851884603500366,
                "sortText": "409d644aSETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.8851884603500366,
                "sortText": "409d644ambstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.8851884603500366,
                "sortText": "409d644asize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.885036051273346,
                "sortText": "409d6e47auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.885036051273346,
                "sortText": "409d6e47bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.885036051273346,
                "sortText": "409d6e47char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.885036051273346,
                "sortText": "409d6e47class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.885036051273346,
                "sortText": "409d6e47const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.885036051273346,
                "sortText": "409d6e47double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.885036051273346,
                "sortText": "409d6e47enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.885036051273346,
                "sortText": "409d6e47false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.885036051273346,
                "sortText": "409d6e47float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.885036051273346,
                "sortText": "409d6e47int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.885036051273346,
                "sortText": "409d6e47long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.885036051273346,
                "sortText": "409d6e47nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.885036051273346,
                "sortText": "409d6e47operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.885036051273346,
                "sortText": "409d6e47short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.885036051273346,
                "sortText": "409d6e47signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.885036051273346,
                "sortText": "409d6e47struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.885036051273346,
                "sortText": "409d6e47true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.885036051273346,
                "sortText": "409d6e47typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.885036051273346,
                "sortText": "409d6e47union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.885036051273346,
                "sortText": "409d6e47unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.885036051273346,
                "sortText": "409d6e47void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.885036051273346,
                "sortText": "409d6e47volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96ctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if",
                "insertText": "enable_if",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " enable_if<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if",
                "textEdit": {
                    "newText": "enable_if",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if_t",
                "insertText": "enable_if_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " enable_if_t<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if_t",
                "textEdit": {
                    "newText": "enable_if_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 15
                        },
                        "start": {
                            "character": 15,
                            "line": 15
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 1,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 2,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 154
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected expression), Error(line=17, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=17, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.381287097930908,
                "sortText": "3f73cc7finteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.381287097930908,
                "sortText": "3f73cc7finteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.423351287841797,
                "sortText": "3fa4e7d0x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 2.8783247470855713,
                "sortText": "3fc7c987cout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.513861060142517,
                "sortText": "403e39cdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.353448510169983,
                "sortText": "4052c233main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.960056483745575,
                "sortText": "408a39bdcerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.960056483745575,
                "sortText": "408a39bdclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.911510169506073,
                "sortText": "4096a745cin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " is_error_code_enum_v<class Ty>",
                "score": 0.911510169506073,
                "sortText": "4096a745is_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 0.8251751661300659,
                "sortText": "40acc152error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.7135143280029297,
                "sortText": "40c95720SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720mbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6298295259475708,
                "sortText": "40dec37e_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.6298295259475708,
                "sortText": "40dec37echar_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ectype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if",
                "insertText": "enable_if",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " enable_if<bool Test, class Ty>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eenable_if",
                "textEdit": {
                    "newText": "enable_if",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "enable_if_t",
                "insertText": "enable_if_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " enable_if_t<bool Test, class Ty>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eenable_if_t",
                "textEdit": {
                    "newText": "enable_if_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.6298295259475708,
                "sortText": "40dec37eerror_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "fpos",
                "insertText": "fpos",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " fpos<class Statetype>",
                "score": 0.6298295259475708,
                "sortText": "40dec37efpos",
                "textEdit": {
                    "newText": "fpos",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "integral_constant",
                "insertText": "integral_constant",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " integral_constant<class Ty, Ty Val>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eintegral_constant",
                "textEdit": {
                    "newText": "integral_constant",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "ios_base",
                "insertText": "ios_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ios_base",
                "score": 0.6298295259475708,
                "sortText": "40dec37eios_base",
                "textEdit": {
                    "newText": "ios_base",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum",
                "insertText": "is_error_code_enum",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " is_error_code_enum<class Enum>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eis_error_code_enum",
                "textEdit": {
                    "newText": "is_error_code_enum",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "istreambuf_iterator",
                "insertText": "istreambuf_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " istreambuf_iterator<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eistreambuf_iterator",
                "textEdit": {
                    "newText": "istreambuf_iterator",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "num_get",
                "insertText": "num_get",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " num_get<class Elem, class InIt>",
                "score": 0.6298295259475708,
                "sortText": "40dec37enum_get",
                "textEdit": {
                    "newText": "num_get",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            },
            {
                "filterText": "num_put",
                "insertText": "num_put",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " num_put<class Elem, class OutIt>",
                "score": 0.6298295259475708,
                "sortText": "40dec37enum_put",
                "textEdit": {
                    "newText": "num_put",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 15
                        },
                        "start": {
                            "character": 14,
                            "line": 15
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 1,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 2,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 156
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected expression), Error(line=17, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=17, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 1,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 2,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 158
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 10, message=Expected ';' after expression (fix available)), Error(line=17, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=17, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 1,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 17
                    },
                    "start": {
                        "character": 2,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 160
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=17, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=17, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 162
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 164
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 166
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 168
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 3.8128018379211426,
                "sortText": "3f8bfb0einteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 3.8128018379211426,
                "sortText": "3f8bfb0einteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 2.948925256729126,
                "sortText": "3fc344cfx",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 1.1264111995697021,
                "sortText": "406fd1c2error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.9800145626068115,
                "sortText": "40851dc4SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4mbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.8596258163452148,
                "sortText": "40a3ef90cout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.7880699634552002,
                "sortText": "40b6410ccin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'c'",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 16
                    },
                    "start": {
                        "character": 3,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 170
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=3, column_end = 4, message=Use of undeclared identifier 'c'), Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 1.704529881477356,
                "sortText": "4025d1f7char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "chrono",
                "insertText": "chrono",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono",
                "textEdit": {
                    "newText": "chrono",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.2873769998550415,
                "sortText": "405b373bcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 1.1393308639526367,
                "sortText": "406e2a68cin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT1",
                "insertText": "CSALCAT1",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT1(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT1",
                "textEdit": {
                    "newText": "CSALCAT1",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT2",
                "insertText": "CSALCAT2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT2(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT2",
                "textEdit": {
                    "newText": "CSALCAT2",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "CLK_TCK",
                "insertText": "CLK_TCK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLK_TCK",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLK_TCK",
                "textEdit": {
                    "newText": "CLK_TCK",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "CLOCKS_PER_SEC",
                "insertText": "CLOCKS_PER_SEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLOCKS_PER_SEC",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLOCKS_PER_SEC",
                "textEdit": {
                    "newText": "CLOCKS_PER_SEC",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "CW_DEFAULT",
                "insertText": "CW_DEFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CW_DEFAULT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CW_DEFAULT",
                "textEdit": {
                    "newText": "CW_DEFAULT",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "clear87",
                "insertText": "clear87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022clear87",
                "score": 0.8436345458030701,
                "sortText": "40a80791clear87",
                "textEdit": {
                    "newText": "clear87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "cv_status",
                "insertText": "cv_status",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022cv_status",
                "score": 0.8070572018623352,
                "sortText": "40b164b3cv_status",
                "textEdit": {
                    "newText": "cv_status",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddcall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nTypes\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022clock_t",
                "score": 0.5684974789619446,
                "sortText": "40ee76f3clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "CaptureCallstack",
                "insertText": "Concurrency::details::platform::CaptureCallstack",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::platform::CaptureCallstack(void **, size_t, size_t)",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dCaptureCallstack",
                "textEdit": {
                    "newText": "Concurrency::details::platform::CaptureCallstack",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Cancels the currently executing task. This function can be called from within the body of a task to abort the task's execution and cause it to enter the <c>canceled</c> state. While it may be used in response to a cancellation request through a <c>cancellation_token</c>, you may also use it by itself, to initiate cancellation of the task that is currently executing.\n<para>It is not a supported scenario to call this function if you are not within the body of a <c>task</c>.\nDoing so will result in undefined behavior such as a crash or a hang in your application.</para> </summary> <seealso cref=\"task Class\"/>"
                },
                "filterText": "cancel_current_task",
                "insertText": "Concurrency::cancel_current_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::cancel_current_task()",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dcancel_current_task",
                "textEdit": {
                    "newText": "Concurrency::cancel_current_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nNo modf(), types must match"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\n3-arg hypot() is hand-crafted"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<ReturnType>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <param name=\"_Token\"> The cancellation token to associate with the task. When the source for this token is canceled, cancellation will be requested on the task.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(const task<ReturnType> &Task)",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<typename details::_TaskTypeFromParam<Ty>::_Type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(Ty Param, task_options TaskOptions = task_options())",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "time_point<Clock, To>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const time_point<Clock, Duration> &Time)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "To",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const duration<Rep, Period> &Dur)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.45782190561294556,
                "sortText": "4115985ecerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.45782190561294556,
                "sortText": "4115985eclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c16rtomb",
                "insertText": "c16rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c16rtomb(char *S, char16_t C16, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc16rtomb",
                "textEdit": {
                    "newText": "c16rtomb",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c32rtomb",
                "insertText": "c32rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c32rtomb(char *S, char32_t C32, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc32rtomb",
                "textEdit": {
                    "newText": "c32rtomb",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "clock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clock()",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "ctime_s",
                "insertText": "ctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime_s(char *const Buffer, const size_t SizeInBytes, const time_t *const Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbctime_s",
                "textEdit": {
                    "newText": "ctime_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "ctime",
                "insertText": "ctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime(const time_t *const Time)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35ctime",
                "textEdit": {
                    "newText": "ctime",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The <c>task_group</c> or <c>structured_task_group</c> object was canceled. One or more tasks may not have executed.\n</summary>"
                },
                "filterText": "canceled",
                "insertText": "Concurrency::canceled",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::canceled",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecanceled",
                "textEdit": {
                    "newText": "Concurrency::canceled",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEXDEV"
                },
                "filterText": "cross_device_link",
                "insertText": "errc::cross_device_link",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::cross_device_link",
                "score": 0.3138078451156616,
                "sortText": "415f5494cross_device_link",
                "textEdit": {
                    "newText": "errc::cross_device_link",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " ctype<class Elem>(size_t Refs = 0)",
                "score": 0.26947274804115295,
                "sortText": "417607abctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " ctype<class Elem>(const _Locinfo &Lobj, size_t Refs = 0)",
                "score": 0.26947274804115295,
                "sortText": "417607abctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrt",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtf",
                "insertText": "cbrtf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtf",
                "textEdit": {
                    "newText": "cbrtf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtl",
                "insertText": "cbrtl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtl",
                "textEdit": {
                    "newText": "cbrtl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceil",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceilf",
                "insertText": "ceilf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceilf",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceilf",
                "textEdit": {
                    "newText": "ceilf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceill",
                "insertText": "ceill",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceill",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceill",
                "textEdit": {
                    "newText": "ceill",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'co'",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 16
                    },
                    "start": {
                        "character": 3,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 172
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=3, column_end = 5, message=Use of undeclared identifier 'co'), Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.2873769998550415,
                "sortText": "405b373bcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt",
                "insertText": "codecvt",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt",
                "textEdit": {
                    "newText": "codecvt",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_base",
                "insertText": "codecvt_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_base",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_base",
                "textEdit": {
                    "newText": "codecvt_base",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_byname",
                "insertText": "codecvt_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_byname<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_byname",
                "textEdit": {
                    "newText": "codecvt_byname",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_mode",
                "insertText": "codecvt_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022codecvt_mode",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_mode",
                "textEdit": {
                    "newText": "codecvt_mode",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "collate",
                "insertText": "collate",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022collate<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3collate",
                "textEdit": {
                    "newText": "collate",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "collate_byname",
                "insertText": "collate_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022collate_byname<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3collate_byname",
                "textEdit": {
                    "newText": "collate_byname",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "common_type",
                "insertText": "common_type",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022common_type<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3common_type",
                "textEdit": {
                    "newText": "common_type",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "common_type_t",
                "insertText": "common_type_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022common_type_t<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3common_type_t",
                "textEdit": {
                    "newText": "common_type_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional",
                "insertText": "conditional",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022conditional<bool Test, class Ty1, class Ty2>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conditional",
                "textEdit": {
                    "newText": "conditional",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional_t",
                "insertText": "conditional_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022conditional_t<bool Test, class Ty1, class Ty2>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conditional_t",
                "textEdit": {
                    "newText": "conditional_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction",
                "insertText": "conjunction",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022conjunction<class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conjunction",
                "textEdit": {
                    "newText": "conjunction",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_options",
                "insertText": "experimental::filesystem::copy_options",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::copy_options",
                "score": 0.5803174376487732,
                "sortText": "40eb7051copy_options",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_options",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, copy_options)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, copy_options, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, copy_options = copy_options::none)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, copy_options, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlink",
                "insertText": "experimental::filesystem::copy_symlink",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_symlink(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_symlink",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_symlink",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlink",
                "insertText": "experimental::filesystem::copy_symlink",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_symlink(const path &, const path &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_symlink",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_symlink",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "411dae4ccall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(double Number, double Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysignf(float Number, float Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysignl(long double Number, long double Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosf",
                "insertText": "cosf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosf",
                "textEdit": {
                    "newText": "cosf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshf",
                "insertText": "coshf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022coshf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcoshf",
                "textEdit": {
                    "newText": "coshf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshl",
                "insertText": "coshl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022coshl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcoshl",
                "textEdit": {
                    "newText": "coshl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosl",
                "insertText": "cosl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosl",
                "textEdit": {
                    "newText": "cosl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 1.1264111995697021,
                "sortText": "4127baa3error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction_v",
                "insertText": "conjunction_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022conjunction_v<class Traits>",
                "score": 0.37649863958358765,
                "sortText": "413f3b92conjunction_v",
                "textEdit": {
                    "newText": "conjunction_v",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::codecvt_mode",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "consume_header",
                "insertText": "consume_header",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022consume_header",
                "score": 0.37649863958358765,
                "sortText": "413f3b92consume_header",
                "textEdit": {
                    "newText": "consume_header",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::syntax_option_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "collate",
                "insertText": "regex_constants::collate",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::collate",
                "score": 0.3138078451156616,
                "sortText": "415f5494collate",
                "textEdit": {
                    "newText": "regex_constants::collate",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.8070572018623352,
                "sortText": "41650b86wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::experimental::filesystem::copy_options",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlinks",
                "insertText": "experimental::filesystem::copy_options::copy_symlinks",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::copy_options::copy_symlinks",
                "score": 0.2961350679397583,
                "sortText": "416860fccopy_symlinks",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_options::copy_symlinks",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.73712557554245,
                "sortText": "417278ceerror_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "integral_constant",
                "insertText": "integral_constant",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " integral_constant<class Ty, Ty Val>",
                "score": 0.73712557554245,
                "sortText": "417278ceintegral_constant",
                "textEdit": {
                    "newText": "integral_constant",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional",
                "insertText": "tr1::conditional",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::conditional",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8conditional",
                "textEdit": {
                    "newText": "tr1::conditional",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cos",
                "score": 0.25286611914634705,
                "sortText": "417e8855cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosf",
                "insertText": "cosf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosf",
                "textEdit": {
                    "newText": "cosf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosh",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshf",
                "insertText": "coshf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022coshf",
                "score": 0.25286611914634705,
                "sortText": "417e8855coshf",
                "textEdit": {
                    "newText": "coshf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshl",
                "insertText": "coshl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022coshl",
                "score": 0.25286611914634705,
                "sortText": "417e8855coshl",
                "textEdit": {
                    "newText": "coshl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosl",
                "insertText": "cosl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosl",
                "textEdit": {
                    "newText": "cosl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> The <c>task_completion_event</c> class allows you to delay the execution of a task until a condition is satisfied,\nor start a task in response to an external event.\n</summary> <typeparam name=\"_ResultType\"> The result type of this <c>task_completion_event</c> class.\n</typeparam> <remarks> Use a task created from a task completion event when your scenario requires you to create a task that will complete, and thereby have its continuations scheduled for execution, at some point in the future. The <c>task_completion_event</c> must have the same type as the task you create, and calling the set method on the task completion event with a value of that type will cause the associated task to complete, and provide that value as a result to its continuations.\n<para>If the task completion event is never signaled, any tasks created from it will be canceled when it is destructed.</para> <para><c>task_completion_event</c> behaves like a smart pointer, and should be passed by value.</para> </remarks> <seealso cref=\"task Class\"/>"
                },
                "filterText": "task_completion_event",
                "insertText": "Concurrency::task_completion_event",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022Concurrency::task_completion_event<typename ResultType>",
                "score": 0.6378918290138245,
                "sortText": "418b0caetask_completion_event",
                "textEdit": {
                    "newText": "Concurrency::task_completion_event",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<OutIt1, OutIt2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "partition_copy",
                "insertText": "partition_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022partition_copy(InIt First, InIt Last, OutIt1 Dest_true, OutIt2 Dest_false, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41a32696partition_copy",
                "textEdit": {
                    "newText": "partition_copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "reverse_copy",
                "insertText": "reverse_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022reverse_copy(BidIt First, BidIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "41a32696reverse_copy",
                "textEdit": {
                    "newText": "reverse_copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 17
                    },
                    "start": {
                        "character": 4,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'cou'",
                "range": {
                    "end": {
                        "character": 6,
                        "line": 16
                    },
                    "start": {
                        "character": 3,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 174
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=17, column=4, column_end = 10, message=Expected ';' after expression (fix available)), Error(line=16, column=3, column_end = 6, message=Use of undeclared identifier 'cou'), Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.2873769998550415,
                "sortText": "405b373bcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt",
                "insertText": "codecvt",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt",
                "textEdit": {
                    "newText": "codecvt",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_base",
                "insertText": "codecvt_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_base",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_base",
                "textEdit": {
                    "newText": "codecvt_base",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_byname",
                "insertText": "codecvt_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_byname<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_byname",
                "textEdit": {
                    "newText": "codecvt_byname",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_mode",
                "insertText": "codecvt_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022codecvt_mode",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_mode",
                "textEdit": {
                    "newText": "codecvt_mode",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "collate",
                "insertText": "collate",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022collate<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3collate",
                "textEdit": {
                    "newText": "collate",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "collate_byname",
                "insertText": "collate_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022collate_byname<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3collate_byname",
                "textEdit": {
                    "newText": "collate_byname",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "common_type",
                "insertText": "common_type",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022common_type<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3common_type",
                "textEdit": {
                    "newText": "common_type",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "common_type_t",
                "insertText": "common_type_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022common_type_t<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3common_type_t",
                "textEdit": {
                    "newText": "common_type_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional",
                "insertText": "conditional",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022conditional<bool Test, class Ty1, class Ty2>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conditional",
                "textEdit": {
                    "newText": "conditional",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional_t",
                "insertText": "conditional_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022conditional_t<bool Test, class Ty1, class Ty2>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conditional_t",
                "textEdit": {
                    "newText": "conditional_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction",
                "insertText": "conjunction",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022conjunction<class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conjunction",
                "textEdit": {
                    "newText": "conjunction",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_options",
                "insertText": "experimental::filesystem::copy_options",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::copy_options",
                "score": 0.5803174376487732,
                "sortText": "40eb7051copy_options",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_options",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, copy_options)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, copy_options, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, copy_options = copy_options::none)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, copy_options, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlink",
                "insertText": "experimental::filesystem::copy_symlink",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_symlink(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_symlink",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_symlink",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlink",
                "insertText": "experimental::filesystem::copy_symlink",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_symlink(const path &, const path &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_symlink",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_symlink",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "411dae4ccall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(double Number, double Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysignf(float Number, float Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysignl(long double Number, long double Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosf",
                "insertText": "cosf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosf",
                "textEdit": {
                    "newText": "cosf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshf",
                "insertText": "coshf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022coshf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcoshf",
                "textEdit": {
                    "newText": "coshf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshl",
                "insertText": "coshl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022coshl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcoshl",
                "textEdit": {
                    "newText": "coshl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosl",
                "insertText": "cosl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosl",
                "textEdit": {
                    "newText": "cosl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 1.1264111995697021,
                "sortText": "4127baa3error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction_v",
                "insertText": "conjunction_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022conjunction_v<class Traits>",
                "score": 0.37649863958358765,
                "sortText": "413f3b92conjunction_v",
                "textEdit": {
                    "newText": "conjunction_v",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::codecvt_mode",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "consume_header",
                "insertText": "consume_header",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022consume_header",
                "score": 0.37649863958358765,
                "sortText": "413f3b92consume_header",
                "textEdit": {
                    "newText": "consume_header",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::syntax_option_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "collate",
                "insertText": "regex_constants::collate",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::collate",
                "score": 0.3138078451156616,
                "sortText": "415f5494collate",
                "textEdit": {
                    "newText": "regex_constants::collate",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.8070572018623352,
                "sortText": "41650b86wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::experimental::filesystem::copy_options",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlinks",
                "insertText": "experimental::filesystem::copy_options::copy_symlinks",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::copy_options::copy_symlinks",
                "score": 0.2961350679397583,
                "sortText": "416860fccopy_symlinks",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_options::copy_symlinks",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.73712557554245,
                "sortText": "417278ceerror_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "integral_constant",
                "insertText": "integral_constant",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " integral_constant<class Ty, Ty Val>",
                "score": 0.73712557554245,
                "sortText": "417278ceintegral_constant",
                "textEdit": {
                    "newText": "integral_constant",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional",
                "insertText": "tr1::conditional",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::conditional",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8conditional",
                "textEdit": {
                    "newText": "tr1::conditional",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cos",
                "score": 0.25286611914634705,
                "sortText": "417e8855cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosf",
                "insertText": "cosf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosf",
                "textEdit": {
                    "newText": "cosf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosh",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshf",
                "insertText": "coshf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022coshf",
                "score": 0.25286611914634705,
                "sortText": "417e8855coshf",
                "textEdit": {
                    "newText": "coshf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshl",
                "insertText": "coshl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022coshl",
                "score": 0.25286611914634705,
                "sortText": "417e8855coshl",
                "textEdit": {
                    "newText": "coshl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosl",
                "insertText": "cosl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosl",
                "textEdit": {
                    "newText": "cosl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> The <c>task_completion_event</c> class allows you to delay the execution of a task until a condition is satisfied,\nor start a task in response to an external event.\n</summary> <typeparam name=\"_ResultType\"> The result type of this <c>task_completion_event</c> class.\n</typeparam> <remarks> Use a task created from a task completion event when your scenario requires you to create a task that will complete, and thereby have its continuations scheduled for execution, at some point in the future. The <c>task_completion_event</c> must have the same type as the task you create, and calling the set method on the task completion event with a value of that type will cause the associated task to complete, and provide that value as a result to its continuations.\n<para>If the task completion event is never signaled, any tasks created from it will be canceled when it is destructed.</para> <para><c>task_completion_event</c> behaves like a smart pointer, and should be passed by value.</para> </remarks> <seealso cref=\"task Class\"/>"
                },
                "filterText": "task_completion_event",
                "insertText": "Concurrency::task_completion_event",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022Concurrency::task_completion_event<typename ResultType>",
                "score": 0.6378918290138245,
                "sortText": "418b0caetask_completion_event",
                "textEdit": {
                    "newText": "Concurrency::task_completion_event",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<OutIt1, OutIt2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "partition_copy",
                "insertText": "partition_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022partition_copy(InIt First, InIt Last, OutIt1 Dest_true, OutIt2 Dest_false, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41a32696partition_copy",
                "textEdit": {
                    "newText": "partition_copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "reverse_copy",
                "insertText": "reverse_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022reverse_copy(BidIt First, BidIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "41a32696reverse_copy",
                "textEdit": {
                    "newText": "reverse_copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'co'",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 16
                    },
                    "start": {
                        "character": 3,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 176
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=3, column_end = 5, message=Use of undeclared identifier 'co'), Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 1.704529881477356,
                "sortText": "4025d1f7char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "chrono",
                "insertText": "chrono",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono",
                "textEdit": {
                    "newText": "chrono",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.2873769998550415,
                "sortText": "405b373bcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 1.1393308639526367,
                "sortText": "406e2a68cin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT1",
                "insertText": "CSALCAT1",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT1(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT1",
                "textEdit": {
                    "newText": "CSALCAT1",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT2",
                "insertText": "CSALCAT2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT2(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT2",
                "textEdit": {
                    "newText": "CSALCAT2",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "CLK_TCK",
                "insertText": "CLK_TCK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLK_TCK",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLK_TCK",
                "textEdit": {
                    "newText": "CLK_TCK",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "CLOCKS_PER_SEC",
                "insertText": "CLOCKS_PER_SEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLOCKS_PER_SEC",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLOCKS_PER_SEC",
                "textEdit": {
                    "newText": "CLOCKS_PER_SEC",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "CW_DEFAULT",
                "insertText": "CW_DEFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CW_DEFAULT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CW_DEFAULT",
                "textEdit": {
                    "newText": "CW_DEFAULT",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "clear87",
                "insertText": "clear87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022clear87",
                "score": 0.8436345458030701,
                "sortText": "40a80791clear87",
                "textEdit": {
                    "newText": "clear87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "cv_status",
                "insertText": "cv_status",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022cv_status",
                "score": 0.8070572018623352,
                "sortText": "40b164b3cv_status",
                "textEdit": {
                    "newText": "cv_status",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddcall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nTypes\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022clock_t",
                "score": 0.5684974789619446,
                "sortText": "40ee76f3clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "CaptureCallstack",
                "insertText": "Concurrency::details::platform::CaptureCallstack",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::platform::CaptureCallstack(void **, size_t, size_t)",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dCaptureCallstack",
                "textEdit": {
                    "newText": "Concurrency::details::platform::CaptureCallstack",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Cancels the currently executing task. This function can be called from within the body of a task to abort the task's execution and cause it to enter the <c>canceled</c> state. While it may be used in response to a cancellation request through a <c>cancellation_token</c>, you may also use it by itself, to initiate cancellation of the task that is currently executing.\n<para>It is not a supported scenario to call this function if you are not within the body of a <c>task</c>.\nDoing so will result in undefined behavior such as a crash or a hang in your application.</para> </summary> <seealso cref=\"task Class\"/>"
                },
                "filterText": "cancel_current_task",
                "insertText": "Concurrency::cancel_current_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::cancel_current_task()",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dcancel_current_task",
                "textEdit": {
                    "newText": "Concurrency::cancel_current_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nNo modf(), types must match"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\n3-arg hypot() is hand-crafted"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<ReturnType>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <param name=\"_Token\"> The cancellation token to associate with the task. When the source for this token is canceled, cancellation will be requested on the task.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(const task<ReturnType> &Task)",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<typename details::_TaskTypeFromParam<Ty>::_Type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(Ty Param, task_options TaskOptions = task_options())",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "time_point<Clock, To>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const time_point<Clock, Duration> &Time)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "To",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const duration<Rep, Period> &Dur)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.45782190561294556,
                "sortText": "4115985ecerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.45782190561294556,
                "sortText": "4115985eclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c16rtomb",
                "insertText": "c16rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c16rtomb(char *S, char16_t C16, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc16rtomb",
                "textEdit": {
                    "newText": "c16rtomb",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c32rtomb",
                "insertText": "c32rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c32rtomb(char *S, char32_t C32, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc32rtomb",
                "textEdit": {
                    "newText": "c32rtomb",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "clock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clock()",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "ctime_s",
                "insertText": "ctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime_s(char *const Buffer, const size_t SizeInBytes, const time_t *const Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbctime_s",
                "textEdit": {
                    "newText": "ctime_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "ctime",
                "insertText": "ctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime(const time_t *const Time)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35ctime",
                "textEdit": {
                    "newText": "ctime",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The <c>task_group</c> or <c>structured_task_group</c> object was canceled. One or more tasks may not have executed.\n</summary>"
                },
                "filterText": "canceled",
                "insertText": "Concurrency::canceled",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::canceled",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecanceled",
                "textEdit": {
                    "newText": "Concurrency::canceled",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEXDEV"
                },
                "filterText": "cross_device_link",
                "insertText": "errc::cross_device_link",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::cross_device_link",
                "score": 0.3138078451156616,
                "sortText": "415f5494cross_device_link",
                "textEdit": {
                    "newText": "errc::cross_device_link",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " ctype<class Elem>(size_t Refs = 0)",
                "score": 0.26947274804115295,
                "sortText": "417607abctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " ctype<class Elem>(const _Locinfo &Lobj, size_t Refs = 0)",
                "score": 0.26947274804115295,
                "sortText": "417607abctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrt",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtf",
                "insertText": "cbrtf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtf",
                "textEdit": {
                    "newText": "cbrtf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtl",
                "insertText": "cbrtl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtl",
                "textEdit": {
                    "newText": "cbrtl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceil",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceilf",
                "insertText": "ceilf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceilf",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceilf",
                "textEdit": {
                    "newText": "ceilf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceill",
                "insertText": "ceill",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceill",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceill",
                "textEdit": {
                    "newText": "ceill",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'c'",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 16
                    },
                    "start": {
                        "character": 3,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 178
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=3, column_end = 4, message=Use of undeclared identifier 'c'), Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 3.8128018379211426,
                "sortText": "3f8bfb0einteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 3.8128018379211426,
                "sortText": "3f8bfb0einteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 2.948925256729126,
                "sortText": "3fc344cfx",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 1.1264111995697021,
                "sortText": "406fd1c2error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.9800145626068115,
                "sortText": "40851dc4SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4mbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.8596258163452148,
                "sortText": "40a3ef90cout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.7880699634552002,
                "sortText": "40b6410ccin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 16
                        },
                        "start": {
                            "character": 3,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 180
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 182
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 3.8128018379211426,
                "sortText": "3f8bfb0einteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 3.8128018379211426,
                "sortText": "3f8bfb0einteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 2.948925256729126,
                "sortText": "3fc344cfx",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 1.1264111995697021,
                "sortText": "406fd1c2error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.9800145626068115,
                "sortText": "40851dc4SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4mbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.8596258163452148,
                "sortText": "40a3ef90cout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.7880699634552002,
                "sortText": "40b6410ccin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'c'",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 184
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 5, message=Use of undeclared identifier 'c'), Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 1.704529881477356,
                "sortText": "4025d1f7char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "chrono",
                "insertText": "chrono",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono",
                "textEdit": {
                    "newText": "chrono",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.2873769998550415,
                "sortText": "405b373bcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 1.1393308639526367,
                "sortText": "406e2a68cin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT1",
                "insertText": "CSALCAT1",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT1(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT1",
                "textEdit": {
                    "newText": "CSALCAT1",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT2",
                "insertText": "CSALCAT2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT2(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT2",
                "textEdit": {
                    "newText": "CSALCAT2",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "CLK_TCK",
                "insertText": "CLK_TCK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLK_TCK",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLK_TCK",
                "textEdit": {
                    "newText": "CLK_TCK",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "CLOCKS_PER_SEC",
                "insertText": "CLOCKS_PER_SEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLOCKS_PER_SEC",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLOCKS_PER_SEC",
                "textEdit": {
                    "newText": "CLOCKS_PER_SEC",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "CW_DEFAULT",
                "insertText": "CW_DEFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CW_DEFAULT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CW_DEFAULT",
                "textEdit": {
                    "newText": "CW_DEFAULT",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "clear87",
                "insertText": "clear87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022clear87",
                "score": 0.8436345458030701,
                "sortText": "40a80791clear87",
                "textEdit": {
                    "newText": "clear87",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "cv_status",
                "insertText": "cv_status",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022cv_status",
                "score": 0.8070572018623352,
                "sortText": "40b164b3cv_status",
                "textEdit": {
                    "newText": "cv_status",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.73712557554245,
                "sortText": "40c34bbdctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddcall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nTypes\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022clock_t",
                "score": 0.5684974789619446,
                "sortText": "40ee76f3clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "CaptureCallstack",
                "insertText": "Concurrency::details::platform::CaptureCallstack",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::platform::CaptureCallstack(void **, size_t, size_t)",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dCaptureCallstack",
                "textEdit": {
                    "newText": "Concurrency::details::platform::CaptureCallstack",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Cancels the currently executing task. This function can be called from within the body of a task to abort the task's execution and cause it to enter the <c>canceled</c> state. While it may be used in response to a cancellation request through a <c>cancellation_token</c>, you may also use it by itself, to initiate cancellation of the task that is currently executing.\n<para>It is not a supported scenario to call this function if you are not within the body of a <c>task</c>.\nDoing so will result in undefined behavior such as a crash or a hang in your application.</para> </summary> <seealso cref=\"task Class\"/>"
                },
                "filterText": "cancel_current_task",
                "insertText": "Concurrency::cancel_current_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::cancel_current_task()",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dcancel_current_task",
                "textEdit": {
                    "newText": "Concurrency::cancel_current_task",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nNo modf(), types must match"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\n3-arg hypot() is hand-crafted"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<ReturnType>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <param name=\"_Token\"> The cancellation token to associate with the task. When the source for this token is canceled, cancellation will be requested on the task.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(const task<ReturnType> &Task)",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<typename details::_TaskTypeFromParam<Ty>::_Type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(Ty Param, task_options TaskOptions = task_options())",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "time_point<Clock, To>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const time_point<Clock, Duration> &Time)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "To",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "ceil",
                "insertText": "chrono::ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022chrono::ceil<class To>(const duration<Rep, Period> &Dur)",
                "score": 0.4826943874359131,
                "sortText": "4108dc48ceil",
                "textEdit": {
                    "newText": "chrono::ceil",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.45782190561294556,
                "sortText": "4115985ecerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.45782190561294556,
                "sortText": "4115985eclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c16rtomb",
                "insertText": "c16rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c16rtomb(char *S, char16_t C16, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc16rtomb",
                "textEdit": {
                    "newText": "c16rtomb",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cuchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cuchar>"
                },
                "filterText": "c32rtomb",
                "insertText": "c32rtomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022c32rtomb(char *S, char32_t C32, mbstate_t *Ps)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbc32rtomb",
                "textEdit": {
                    "newText": "c32rtomb",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "clock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clock()",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "ctime_s",
                "insertText": "ctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime_s(char *const Buffer, const size_t SizeInBytes, const time_t *const Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbctime_s",
                "textEdit": {
                    "newText": "ctime_s",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "ctime",
                "insertText": "ctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime(const time_t *const Time)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35ctime",
                "textEdit": {
                    "newText": "ctime",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The <c>task_group</c> or <c>structured_task_group</c> object was canceled. One or more tasks may not have executed.\n</summary>"
                },
                "filterText": "canceled",
                "insertText": "Concurrency::canceled",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::canceled",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecanceled",
                "textEdit": {
                    "newText": "Concurrency::canceled",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEXDEV"
                },
                "filterText": "cross_device_link",
                "insertText": "errc::cross_device_link",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::cross_device_link",
                "score": 0.3138078451156616,
                "sortText": "415f5494cross_device_link",
                "textEdit": {
                    "newText": "errc::cross_device_link",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " ctype<class Elem>(const _Locinfo &Lobj, size_t Refs = 0)",
                "score": 0.26947274804115295,
                "sortText": "417607abctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " ctype<class Elem>(size_t Refs = 0)",
                "score": 0.26947274804115295,
                "sortText": "417607abctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrt",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtf",
                "insertText": "cbrtf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtf",
                "textEdit": {
                    "newText": "cbrtf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtl",
                "insertText": "cbrtl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtl",
                "textEdit": {
                    "newText": "cbrtl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceil",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceilf",
                "insertText": "ceilf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceilf",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceilf",
                "textEdit": {
                    "newText": "ceilf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceill",
                "insertText": "ceill",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceill",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceill",
                "textEdit": {
                    "newText": "ceill",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'co'",
                "range": {
                    "end": {
                        "character": 6,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 186
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=16, column=4, column_end = 6, message=Use of undeclared identifier 'co'), Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.2873769998550415,
                "sortText": "405b373bcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt",
                "insertText": "codecvt",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt",
                "textEdit": {
                    "newText": "codecvt",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_base",
                "insertText": "codecvt_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_base",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_base",
                "textEdit": {
                    "newText": "codecvt_base",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_byname",
                "insertText": "codecvt_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_byname<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_byname",
                "textEdit": {
                    "newText": "codecvt_byname",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_mode",
                "insertText": "codecvt_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022codecvt_mode",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_mode",
                "textEdit": {
                    "newText": "codecvt_mode",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "collate",
                "insertText": "collate",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022collate<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3collate",
                "textEdit": {
                    "newText": "collate",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "collate_byname",
                "insertText": "collate_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022collate_byname<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3collate_byname",
                "textEdit": {
                    "newText": "collate_byname",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "common_type",
                "insertText": "common_type",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022common_type<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3common_type",
                "textEdit": {
                    "newText": "common_type",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "common_type_t",
                "insertText": "common_type_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022common_type_t<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3common_type_t",
                "textEdit": {
                    "newText": "common_type_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional",
                "insertText": "conditional",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022conditional<bool Test, class Ty1, class Ty2>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conditional",
                "textEdit": {
                    "newText": "conditional",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional_t",
                "insertText": "conditional_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022conditional_t<bool Test, class Ty1, class Ty2>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conditional_t",
                "textEdit": {
                    "newText": "conditional_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction",
                "insertText": "conjunction",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022conjunction<class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conjunction",
                "textEdit": {
                    "newText": "conjunction",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_options",
                "insertText": "experimental::filesystem::copy_options",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::copy_options",
                "score": 0.5803174376487732,
                "sortText": "40eb7051copy_options",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_options",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, copy_options)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, copy_options, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, copy_options = copy_options::none)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, copy_options, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlink",
                "insertText": "experimental::filesystem::copy_symlink",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_symlink(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_symlink",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_symlink",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlink",
                "insertText": "experimental::filesystem::copy_symlink",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_symlink(const path &, const path &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_symlink",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_symlink",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "411dae4ccall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(double Number, double Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysignf(float Number, float Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysignl(long double Number, long double Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosf",
                "insertText": "cosf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosf",
                "textEdit": {
                    "newText": "cosf",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshf",
                "insertText": "coshf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022coshf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcoshf",
                "textEdit": {
                    "newText": "coshf",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshl",
                "insertText": "coshl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022coshl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcoshl",
                "textEdit": {
                    "newText": "coshl",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosl",
                "insertText": "cosl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosl",
                "textEdit": {
                    "newText": "cosl",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 1.1264111995697021,
                "sortText": "4127baa3error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction_v",
                "insertText": "conjunction_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022conjunction_v<class Traits>",
                "score": 0.37649863958358765,
                "sortText": "413f3b92conjunction_v",
                "textEdit": {
                    "newText": "conjunction_v",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::codecvt_mode",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "consume_header",
                "insertText": "consume_header",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022consume_header",
                "score": 0.37649863958358765,
                "sortText": "413f3b92consume_header",
                "textEdit": {
                    "newText": "consume_header",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::syntax_option_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "collate",
                "insertText": "regex_constants::collate",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::collate",
                "score": 0.3138078451156616,
                "sortText": "415f5494collate",
                "textEdit": {
                    "newText": "regex_constants::collate",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.8070572018623352,
                "sortText": "41650b86wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::experimental::filesystem::copy_options",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlinks",
                "insertText": "experimental::filesystem::copy_options::copy_symlinks",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::copy_options::copy_symlinks",
                "score": 0.2961350679397583,
                "sortText": "416860fccopy_symlinks",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_options::copy_symlinks",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.73712557554245,
                "sortText": "417278ceerror_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "integral_constant",
                "insertText": "integral_constant",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " integral_constant<class Ty, Ty Val>",
                "score": 0.73712557554245,
                "sortText": "417278ceintegral_constant",
                "textEdit": {
                    "newText": "integral_constant",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional",
                "insertText": "tr1::conditional",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::conditional",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8conditional",
                "textEdit": {
                    "newText": "tr1::conditional",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cos",
                "score": 0.25286611914634705,
                "sortText": "417e8855cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosf",
                "insertText": "cosf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosf",
                "textEdit": {
                    "newText": "cosf",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosh",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshf",
                "insertText": "coshf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022coshf",
                "score": 0.25286611914634705,
                "sortText": "417e8855coshf",
                "textEdit": {
                    "newText": "coshf",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshl",
                "insertText": "coshl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022coshl",
                "score": 0.25286611914634705,
                "sortText": "417e8855coshl",
                "textEdit": {
                    "newText": "coshl",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosl",
                "insertText": "cosl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosl",
                "textEdit": {
                    "newText": "cosl",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> The <c>task_completion_event</c> class allows you to delay the execution of a task until a condition is satisfied,\nor start a task in response to an external event.\n</summary> <typeparam name=\"_ResultType\"> The result type of this <c>task_completion_event</c> class.\n</typeparam> <remarks> Use a task created from a task completion event when your scenario requires you to create a task that will complete, and thereby have its continuations scheduled for execution, at some point in the future. The <c>task_completion_event</c> must have the same type as the task you create, and calling the set method on the task completion event with a value of that type will cause the associated task to complete, and provide that value as a result to its continuations.\n<para>If the task completion event is never signaled, any tasks created from it will be canceled when it is destructed.</para> <para><c>task_completion_event</c> behaves like a smart pointer, and should be passed by value.</para> </remarks> <seealso cref=\"task Class\"/>"
                },
                "filterText": "task_completion_event",
                "insertText": "Concurrency::task_completion_event",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022Concurrency::task_completion_event<typename ResultType>",
                "score": 0.6378918290138245,
                "sortText": "418b0caetask_completion_event",
                "textEdit": {
                    "newText": "Concurrency::task_completion_event",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<OutIt1, OutIt2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "partition_copy",
                "insertText": "partition_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022partition_copy(InIt First, InIt Last, OutIt1 Dest_true, OutIt2 Dest_false, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41a32696partition_copy",
                "textEdit": {
                    "newText": "partition_copy",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "reverse_copy",
                "insertText": "reverse_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022reverse_copy(BidIt First, BidIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "41a32696reverse_copy",
                "textEdit": {
                    "newText": "reverse_copy",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.2873769998550415,
                "sortText": "405b373bcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40d3d3eacodecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40d3d3eacodecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40d3d3eacodecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "uintmax_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "hard_link_count",
                "insertText": "experimental::filesystem::hard_link_count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::hard_link_count(const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "419640d2hard_link_count",
                "textEdit": {
                    "newText": "experimental::filesystem::hard_link_count",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "uintmax_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "hard_link_count",
                "insertText": "experimental::filesystem::hard_link_count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::hard_link_count(const path &)",
                "score": 0.4565367102622986,
                "sortText": "419640d2hard_link_count",
                "textEdit": {
                    "newText": "experimental::filesystem::hard_link_count",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_get_printf_count_output",
                "insertText": "_get_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_printf_count_output()",
                "score": 0.4419805109500885,
                "sortText": "41c36bf1_get_printf_count_output",
                "textEdit": {
                    "newText": "_get_printf_count_output",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_set_printf_count_output",
                "insertText": "_set_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_set_printf_count_output(int Value)",
                "score": 0.4419805109500885,
                "sortText": "41c36bf1_set_printf_count_output",
                "textEdit": {
                    "newText": "_set_printf_count_output",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 17
                    },
                    "start": {
                        "character": 4,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 16
                    },
                    "start": {
                        "character": 4,
                        "line": 16
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 190
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=17, column=4, column_end = 10, message=Expected ';' after expression (fix available)), Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.2873769998550415,
                "sortText": "3fdb373bcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_get_printf_count_output",
                "insertText": "_get_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_printf_count_output()",
                "score": 0.4419805109500885,
                "sortText": "41b9fe24_get_printf_count_output",
                "textEdit": {
                    "newText": "_get_printf_count_output",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_set_printf_count_output",
                "insertText": "_set_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_set_printf_count_output(int Value)",
                "score": 0.4419805109500885,
                "sortText": "41b9fe24_set_printf_count_output",
                "textEdit": {
                    "newText": "_set_printf_count_output",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 16
                        },
                        "start": {
                            "character": 4,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 17
                    },
                    "start": {
                        "character": 4,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 196
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=17, column=4, column_end = 10, message=Expected expression), Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.381287097930908,
                "sortText": "3f73cc7finteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.381287097930908,
                "sortText": "3f73cc7finteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.423351287841797,
                "sortText": "3fa4e7d0x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 2.8783247470855713,
                "sortText": "3fc7c987cout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.513861060142517,
                "sortText": "403e39cdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.353448510169983,
                "sortText": "4052c233main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.960056483745575,
                "sortText": "408a39bdcerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.960056483745575,
                "sortText": "408a39bdclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.911510169506073,
                "sortText": "4096a745cin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " is_error_code_enum_v<class Ty>",
                "score": 0.911510169506073,
                "sortText": "4096a745is_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 0.8251751661300659,
                "sortText": "40acc152error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.7941728830337524,
                "sortText": "40b4b116operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.7135143280029297,
                "sortText": "40c95720SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720mbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6298295259475708,
                "sortText": "40dec37e_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.6298295259475708,
                "sortText": "40dec37echar_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ectype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "enable_if",
                "insertText": "enable_if",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " enable_if<bool Test, class Ty>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eenable_if",
                "textEdit": {
                    "newText": "enable_if",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "enable_if_t",
                "insertText": "enable_if_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " enable_if_t<bool Test, class Ty>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eenable_if_t",
                "textEdit": {
                    "newText": "enable_if_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.6298295259475708,
                "sortText": "40dec37eerror_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "fpos",
                "insertText": "fpos",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " fpos<class Statetype>",
                "score": 0.6298295259475708,
                "sortText": "40dec37efpos",
                "textEdit": {
                    "newText": "fpos",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "integral_constant",
                "insertText": "integral_constant",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " integral_constant<class Ty, Ty Val>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eintegral_constant",
                "textEdit": {
                    "newText": "integral_constant",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ios_base",
                "insertText": "ios_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ios_base",
                "score": 0.6298295259475708,
                "sortText": "40dec37eios_base",
                "textEdit": {
                    "newText": "ios_base",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum",
                "insertText": "is_error_code_enum",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " is_error_code_enum<class Enum>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eis_error_code_enum",
                "textEdit": {
                    "newText": "is_error_code_enum",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "istreambuf_iterator",
                "insertText": "istreambuf_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " istreambuf_iterator<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37eistreambuf_iterator",
                "textEdit": {
                    "newText": "istreambuf_iterator",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "num_get",
                "insertText": "num_get",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " num_get<class Elem, class InIt>",
                "score": 0.6298295259475708,
                "sortText": "40dec37enum_get",
                "textEdit": {
                    "newText": "num_get",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "num_put",
                "insertText": "num_put",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " num_put<class Elem, class OutIt>",
                "score": 0.6298295259475708,
                "sortText": "40dec37enum_put",
                "textEdit": {
                    "newText": "num_put",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 16
                        },
                        "start": {
                            "character": 9,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 17
                    },
                    "start": {
                        "character": 4,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 198
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=17, column=4, column_end = 10, message=Expected expression), Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 4.413792610168457,
                "sortText": "3f72c236integer2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.5021395683288574,
                "sortText": "3f9fdcf2x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.9921669960021973,
                "sortText": "400100acmain",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.466963291168213,
                "sortText": "40443a8cstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.0881673097610474,
                "sortText": "4074b6efcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dcin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " is_error_code_enum_v<class Ty>",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dis_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 0.9007225036621094,
                "sortText": "40996a40error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.8851884603500366,
                "sortText": "409d644aSETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.8851884603500366,
                "sortText": "409d644ambstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.8851884603500366,
                "sortText": "409d644asize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.885036051273346,
                "sortText": "409d6e47auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.885036051273346,
                "sortText": "409d6e47bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.885036051273346,
                "sortText": "409d6e47char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.885036051273346,
                "sortText": "409d6e47class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.885036051273346,
                "sortText": "409d6e47const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.885036051273346,
                "sortText": "409d6e47double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.885036051273346,
                "sortText": "409d6e47enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.885036051273346,
                "sortText": "409d6e47false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.885036051273346,
                "sortText": "409d6e47float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.885036051273346,
                "sortText": "409d6e47int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.885036051273346,
                "sortText": "409d6e47long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.885036051273346,
                "sortText": "409d6e47nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.885036051273346,
                "sortText": "409d6e47operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.885036051273346,
                "sortText": "409d6e47short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.885036051273346,
                "sortText": "409d6e47signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.885036051273346,
                "sortText": "409d6e47struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.885036051273346,
                "sortText": "409d6e47true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.885036051273346,
                "sortText": "409d6e47typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.885036051273346,
                "sortText": "409d6e47union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.885036051273346,
                "sortText": "409d6e47unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.885036051273346,
                "sortText": "409d6e47void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.885036051273346,
                "sortText": "409d6e47volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.7618282437324524,
                "sortText": "40bcf8d3operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "basic_ios",
                "insertText": "basic_ios",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ios<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ios",
                "textEdit": {
                    "newText": "basic_ios",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "basic_streambuf",
                "insertText": "basic_streambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_streambuf<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_streambuf",
                "textEdit": {
                    "newText": "basic_streambuf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " char_traits<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " ctype<class Elem>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96ctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "enable_if",
                "insertText": "enable_if",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " enable_if<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if",
                "textEdit": {
                    "newText": "enable_if",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "enable_if_t",
                "insertText": "enable_if_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " enable_if_t<bool Test, class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96enable_if_t",
                "textEdit": {
                    "newText": "enable_if_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " error_code",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 16
                        },
                        "start": {
                            "character": 10,
                            "line": 16
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 17
                    },
                    "start": {
                        "character": 4,
                        "line": 17
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 200
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=17, column=4, column_end = 10, message=Expected ';' after expression (fix available)), Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'x'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 1,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 18
                    },
                    "start": {
                        "character": 2,
                        "line": 18
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 202
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=18, column=1, column_end = 2, message=Unknown type name 'x'), Error(line=18, column=2, column_end = 2, message=Expected unqualified-id)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.968748688697815,
                "sortText": "4004000bstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 1.5456733703613281,
                "sortText": "403a2760SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.5456733703613281,
                "sortText": "403a2760size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_exit_return_mode",
                "score": 1.0486767292022705,
                "sortText": "4079c4f6_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_crt_exit_return_mode",
                "score": 1.0486767292022705,
                "sortText": "4079c4f6_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 1.0411033630371094,
                "sortText": "407abd20_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 1.0411033630371094,
                "sortText": "407abd20type_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99ballocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.9031737446784973,
                "sortText": "4098c99ballocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.9031737446784973,
                "sortText": "4098c99bbad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.9031737446784973,
                "sortText": "4098c99bbad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.9031737446784973,
                "sortText": "4098c99bbad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.9031737446784973,
                "sortText": "4098c99bcondition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.9031737446784973,
                "sortText": "4098c99bexception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bwbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bwstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_ADAPTOR_EMPLACE_RETURN",
                "insertText": "_ADAPTOR_EMPLACE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ADAPTOR_EMPLACE_RETURN",
                "score": 0.8693320155143738,
                "sortText": "40a17375_ADAPTOR_EMPLACE_RETURN",
                "textEdit": {
                    "newText": "_ADAPTOR_EMPLACE_RETURN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_CONTAINER_EMPLACE_RETURN",
                "insertText": "_CONTAINER_EMPLACE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CONTAINER_EMPLACE_RETURN",
                "score": 0.8693320155143738,
                "sortText": "40a17375_CONTAINER_EMPLACE_RETURN",
                "textEdit": {
                    "newText": "_CONTAINER_EMPLACE_RETURN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_LIST_REMOVE_RETURN",
                "insertText": "_LIST_REMOVE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_LIST_REMOVE_RETURN",
                "score": 0.8693320155143738,
                "sortText": "40a17375_LIST_REMOVE_RETURN",
                "textEdit": {
                    "newText": "_LIST_REMOVE_RETURN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aalignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "asm",
                "insertText": "asm",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " asm(string-literal)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aasm",
                "textEdit": {
                    "newText": "asm",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aauto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7abool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aclass",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aconst",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aconstexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7adecltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7adouble",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aenum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aextern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7afloat",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ainline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aint",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7along",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "namespace",
                "insertText": "namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " namespace name = namespace;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7anamespace",
                "textEdit": {
                    "newText": "namespace",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aoperator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ashort",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7asigned",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astruct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atemplate",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atemplate",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7athread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atypedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atypename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunion",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7avoid",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7avolatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7awchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_argv_mode",
                "insertText": "_crt_argv_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_argv_mode",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67_crt_argv_mode",
                "textEdit": {
                    "newText": "_crt_argv_mode",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6313035488128662,
                "sortText": "40de62e4CancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6313035488128662,
                "sortText": "40de62e4cancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6313035488128662,
                "sortText": "40de62e4cancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6313035488128662,
                "sortText": "40de62e4cancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "filterText": "_JBTYPE",
                "insertText": "_JBTYPE",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " _JBTYPE",
                "score": 0.6052880883216858,
                "sortText": "40e50bd7_JBTYPE",
                "textEdit": {
                    "newText": "_JBTYPE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "return_temporary_buffer",
                "insertText": "return_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022return_temporary_buffer(Ty *Pbuf)",
                "score": 0.5797262787818909,
                "sortText": "40eb970freturn_temporary_buffer",
                "textEdit": {
                    "newText": "return_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCINFO",
                "insertText": "_BEGIN_LOCINFO",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCINFO(_VarName)",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_BEGIN_LOCINFO",
                "textEdit": {
                    "newText": "_BEGIN_LOCINFO",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCK",
                "insertText": "_BEGIN_LOCK",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCK(_Kind)",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_BEGIN_LOCK",
                "textEdit": {
                    "newText": "_BEGIN_LOCK",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH",
                "insertText": "_CATCH",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_CATCH(x)",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_CATCH",
                "textEdit": {
                    "newText": "_CATCH",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_ALL",
                "insertText": "_CATCH_ALL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_ALL",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_CATCH_ALL",
                "textEdit": {
                    "newText": "_CATCH_ALL",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_END",
                "insertText": "_CATCH_END",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_END",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_CATCH_END",
                "textEdit": {
                    "newText": "_CATCH_END",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_CLANG_CONSTEXPR20",
                "insertText": "_CLANG_CONSTEXPR20",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CLANG_CONSTEXPR20",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_CLANG_CONSTEXPR20",
                "textEdit": {
                    "newText": "_CLANG_CONSTEXPR20",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTDATA2_IMPORT",
                "insertText": "_CRTDATA2_IMPORT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTDATA2_IMPORT",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_CRTDATA2_IMPORT",
                "textEdit": {
                    "newText": "_CRTDATA2_IMPORT",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_IMPORT",
                "insertText": "_CRTIMP2_IMPORT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_IMPORT",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_CRTIMP2_IMPORT",
                "textEdit": {
                    "newText": "_CRTIMP2_IMPORT",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_PURE",
                "insertText": "_CRTIMP2_PURE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_PURE",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_CRTIMP2_PURE",
                "textEdit": {
                    "newText": "_CRTIMP2_PURE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_PURE_IMPORT",
                "insertText": "_CRTIMP2_PURE_IMPORT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_PURE_IMPORT",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_CRTIMP2_PURE_IMPORT",
                "textEdit": {
                    "newText": "_CRTIMP2_PURE_IMPORT",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "insertText": "_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                "textEdit": {
                    "newText": "_CRTIMP2_PURE_IMPORT_UNLESS_CODECVT_ID_SATELLITE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CRT_MSVCP_CURRENT",
                "insertText": "_CRT_MSVCP_CURRENT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CRT_MSVCP_CURRENT",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_CRT_MSVCP_CURRENT",
                "textEdit": {
                    "newText": "_CRT_MSVCP_CURRENT",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_END_LOCINFO",
                "insertText": "_END_LOCINFO",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_END_LOCINFO()",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_END_LOCINFO",
                "textEdit": {
                    "newText": "_END_LOCINFO",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_END_LOCK",
                "insertText": "_END_LOCK",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_END_LOCK()",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_END_LOCK",
                "textEdit": {
                    "newText": "_END_LOCK",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_GET_PROXY_ALLOCATOR",
                "insertText": "_GET_PROXY_ALLOCATOR",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_GET_PROXY_ALLOCATOR(_Alty, _Al)",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_GET_PROXY_ALLOCATOR",
                "textEdit": {
                    "newText": "_GET_PROXY_ALLOCATOR",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_HAS_ITERATOR_DEBUGGING",
                "insertText": "_HAS_ITERATOR_DEBUGGING",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_HAS_ITERATOR_DEBUGGING",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_HAS_ITERATOR_DEBUGGING",
                "textEdit": {
                    "newText": "_HAS_ITERATOR_DEBUGGING",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_ITERATOR_DEBUG_LEVEL",
                "insertText": "_ITERATOR_DEBUG_LEVEL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ITERATOR_DEBUG_LEVEL",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ITERATOR_DEBUG_LEVEL",
                "textEdit": {
                    "newText": "_ITERATOR_DEBUG_LEVEL",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_LOCK_DEBUG",
                "insertText": "_LOCK_DEBUG",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_LOCK_DEBUG",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_LOCK_DEBUG",
                "textEdit": {
                    "newText": "_LOCK_DEBUG",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_LOCK_LOCALE",
                "insertText": "_LOCK_LOCALE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_LOCK_LOCALE",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_LOCK_LOCALE",
                "textEdit": {
                    "newText": "_LOCK_LOCALE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_LOCK_STREAM",
                "insertText": "_LOCK_STREAM",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_LOCK_STREAM",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_LOCK_STREAM",
                "textEdit": {
                    "newText": "_LOCK_STREAM",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MRTIMP2_PURE",
                "insertText": "_MRTIMP2_PURE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MRTIMP2_PURE",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MRTIMP2_PURE",
                "textEdit": {
                    "newText": "_MRTIMP2_PURE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_DESTRUCTOR_TOMBSTONES",
                "insertText": "_MSVC_STL_DESTRUCTOR_TOMBSTONES",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MSVC_STL_DESTRUCTOR_TOMBSTONES",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_DESTRUCTOR_TOMBSTONES",
                "textEdit": {
                    "newText": "_MSVC_STL_DESTRUCTOR_TOMBSTONES",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_DOOM_FUNCTION",
                "insertText": "_MSVC_STL_DOOM_FUNCTION",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_MSVC_STL_DOOM_FUNCTION(mesg)",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_DOOM_FUNCTION",
                "textEdit": {
                    "newText": "_MSVC_STL_DOOM_FUNCTION",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_HARDENING",
                "insertText": "_MSVC_STL_HARDENING",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MSVC_STL_HARDENING",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_HARDENING",
                "textEdit": {
                    "newText": "_MSVC_STL_HARDENING",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_HARDENING_ARRAY",
                "insertText": "_MSVC_STL_HARDENING_ARRAY",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MSVC_STL_HARDENING_ARRAY",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_HARDENING_ARRAY",
                "textEdit": {
                    "newText": "_MSVC_STL_HARDENING_ARRAY",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_HARDENING_BASIC_STRING",
                "insertText": "_MSVC_STL_HARDENING_BASIC_STRING",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MSVC_STL_HARDENING_BASIC_STRING",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_HARDENING_BASIC_STRING",
                "textEdit": {
                    "newText": "_MSVC_STL_HARDENING_BASIC_STRING",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_HARDENING_BASIC_STRING_VIEW",
                "insertText": "_MSVC_STL_HARDENING_BASIC_STRING_VIEW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MSVC_STL_HARDENING_BASIC_STRING_VIEW",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_HARDENING_BASIC_STRING_VIEW",
                "textEdit": {
                    "newText": "_MSVC_STL_HARDENING_BASIC_STRING_VIEW",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_HARDENING_BITSET",
                "insertText": "_MSVC_STL_HARDENING_BITSET",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MSVC_STL_HARDENING_BITSET",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_HARDENING_BITSET",
                "textEdit": {
                    "newText": "_MSVC_STL_HARDENING_BITSET",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_HARDENING_DEQUE",
                "insertText": "_MSVC_STL_HARDENING_DEQUE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MSVC_STL_HARDENING_DEQUE",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_HARDENING_DEQUE",
                "textEdit": {
                    "newText": "_MSVC_STL_HARDENING_DEQUE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_HARDENING_EXPECTED",
                "insertText": "_MSVC_STL_HARDENING_EXPECTED",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MSVC_STL_HARDENING_EXPECTED",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_HARDENING_EXPECTED",
                "textEdit": {
                    "newText": "_MSVC_STL_HARDENING_EXPECTED",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_HARDENING_FORWARD_LIST",
                "insertText": "_MSVC_STL_HARDENING_FORWARD_LIST",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MSVC_STL_HARDENING_FORWARD_LIST",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_HARDENING_FORWARD_LIST",
                "textEdit": {
                    "newText": "_MSVC_STL_HARDENING_FORWARD_LIST",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_HARDENING_LIST",
                "insertText": "_MSVC_STL_HARDENING_LIST",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MSVC_STL_HARDENING_LIST",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_HARDENING_LIST",
                "textEdit": {
                    "newText": "_MSVC_STL_HARDENING_LIST",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_MSVC_STL_HARDENING_MDSPAN",
                "insertText": "_MSVC_STL_HARDENING_MDSPAN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MSVC_STL_HARDENING_MDSPAN",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_MSVC_STL_HARDENING_MDSPAN",
                "textEdit": {
                    "newText": "_MSVC_STL_HARDENING_MDSPAN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 18
                        },
                        "start": {
                            "character": 1,
                            "line": 18
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 208
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 215
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 9
                    },
                    "start": {
                        "character": 18,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 217
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=9, column=18, column_end = 19, message=Expected expression)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 20,
                        "line": 9
                    },
                    "start": {
                        "character": 19,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 219
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=9, column=19, column_end = 20, message=Expected expression)]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 221
    }
}
Diagnostics received from LSP.
Errors received: []
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 233
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 9
                    },
                    "start": {
                        "character": 32,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 235
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=9, column=32, column_end = 33, message=Expected expression)]
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 34,
                        "line": 9
                    },
                    "start": {
                        "character": 33,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 237
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=9, column=33, column_end = 34, message=Expected expression)]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "integer1",
                "insertText": "integer1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer1",
                "score": 3.833096742630005,
                "sortText": "3f8aae8binteger1",
                "textEdit": {
                    "newText": "integer1",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "integer2",
                "insertText": "integer2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " integer2",
                "score": 3.833096742630005,
                "sortText": "3f8aae8binteger2",
                "textEdit": {
                    "newText": "integer2",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "SETJMP_FLOAT128",
                "insertText": "SETJMP_FLOAT128",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " SETJMP_FLOAT128",
                "score": 0.9800145626068115,
                "sortText": "40851dc4SETJMP_FLOAT128",
                "textEdit": {
                    "newText": "SETJMP_FLOAT128",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3allocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_alloc",
                "insertText": "bad_alloc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_alloc",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_alloc",
                "textEdit": {
                    "newText": "bad_alloc",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <new>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <new>"
                },
                "filterText": "bad_array_new_length",
                "insertText": "bad_array_new_length",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_array_new_length",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_array_new_length",
                "textEdit": {
                    "newText": "bad_array_new_length",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "bad_exception",
                "insertText": "bad_exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022bad_exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3bad_exception",
                "textEdit": {
                    "newText": "bad_exception",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "exception",
                "insertText": "exception",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022exception",
                "score": 0.8070572018623352,
                "sortText": "40b164b3exception",
                "textEdit": {
                    "newText": "exception",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.73712557554245,
                "sortText": "40c34bbd_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.73712557554245,
                "sortText": "40c34bbdtype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_argv_mode",
                "insertText": "_crt_argv_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_argv_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_argv_mode",
                "textEdit": {
                    "newText": "_crt_argv_mode",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_crt_exit_return_mode",
                "insertText": "_crt_exit_return_mode",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_crt_exit_return_mode",
                "score": 0.6617947220802307,
                "sortText": "40d6949f_crt_exit_return_mode",
                "textEdit": {
                    "newText": "_crt_exit_return_mode",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "align",
                "insertText": "align",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022align(size_t Bound, size_t Size, void *&Ptr, size_t &Space)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddalign",
                "textEdit": {
                    "newText": "align",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "notify_all_at_thread_exit",
                "insertText": "notify_all_at_thread_exit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022notify_all_at_thread_exit(condition_variable &Cnd, unique_lock<mutex> Lck)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddnotify_all_at_thread_exit",
                "textEdit": {
                    "newText": "notify_all_at_thread_exit",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const allocator<Ty> &, const allocator<Other> &)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const allocator<Ty> &, const allocator<Other> &)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "return_temporary_buffer",
                "insertText": "return_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022return_temporary_buffer(Ty *Pbuf)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddreturn_temporary_buffer",
                "textEdit": {
                    "newText": "return_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_fill",
                "insertText": "uninitialized_fill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_fill(const NoThrowFwdIt First, const NoThrowFwdIt Last, const Tval &Val)",
                "score": 0.5893728137016296,
                "sortText": "40e91edduninitialized_fill",
                "textEdit": {
                    "newText": "uninitialized_fill",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "pair<Ty *, ptrdiff_t>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "get_temporary_buffer",
                "insertText": "get_temporary_buffer",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_temporary_buffer<class Ty>(ptrdiff_t Count)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464get_temporary_buffer",
                "textEdit": {
                    "newText": "get_temporary_buffer",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove",
                "insertText": "remove",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove(FwdIt First, const FwdIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464remove",
                "textEdit": {
                    "newText": "remove",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove_if",
                "insertText": "remove_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove_if(FwdIt First, const FwdIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464remove_if",
                "textEdit": {
                    "newText": "remove_if",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "NoThrowFwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_copy",
                "insertText": "uninitialized_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022uninitialized_copy(const InIt First, const InIt Last, NoThrowFwdIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464uninitialized_copy",
                "textEdit": {
                    "newText": "uninitialized_copy",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <vcruntime_startup.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_crt_argv_mode",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <vcruntime_startup.h>"
                },
                "filterText": "_get_startup_argv_mode",
                "insertText": "_get_startup_argv_mode",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_startup_argv_mode()",
                "score": 0.5127986073493958,
                "sortText": "40fcb93b_get_startup_argv_mode",
                "textEdit": {
                    "newText": "_get_startup_argv_mode",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_ADAPTOR_EMPLACE_RETURN",
                "insertText": "_ADAPTOR_EMPLACE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ADAPTOR_EMPLACE_RETURN",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_ADAPTOR_EMPLACE_RETURN",
                "textEdit": {
                    "newText": "_ADAPTOR_EMPLACE_RETURN",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCINFO",
                "insertText": "_BEGIN_LOCINFO",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCINFO(_VarName)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_BEGIN_LOCINFO",
                "textEdit": {
                    "newText": "_BEGIN_LOCINFO",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_BEGIN_LOCK",
                "insertText": "_BEGIN_LOCK",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_BEGIN_LOCK(_Kind)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_BEGIN_LOCK",
                "textEdit": {
                    "newText": "_BEGIN_LOCK",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH",
                "insertText": "_CATCH",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_CATCH(x)",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH",
                "textEdit": {
                    "newText": "_CATCH",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_ALL",
                "insertText": "_CATCH_ALL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_ALL",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH_ALL",
                "textEdit": {
                    "newText": "_CATCH_ALL",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <yvals.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <yvals.h>"
                },
                "filterText": "_CATCH_END",
                "insertText": "_CATCH_END",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CATCH_END",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CATCH_END",
                "textEdit": {
                    "newText": "_CATCH_END",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_CLANG_CONSTEXPR20",
                "insertText": "_CLANG_CONSTEXPR20",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CLANG_CONSTEXPR20",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CLANG_CONSTEXPR20",
                "textEdit": {
                    "newText": "_CLANG_CONSTEXPR20",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xmemory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xmemory>"
                },
                "filterText": "_CONTAINER_EMPLACE_RETURN",
                "insertText": "_CONTAINER_EMPLACE_RETURN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CONTAINER_EMPLACE_RETURN",
                "score": 0.505889356136322,
                "sortText": "40fe7e09_CONTAINER_EMPLACE_RETURN",
                "textEdit": {
                    "newText": "_CONTAINER_EMPLACE_RETURN",
                    "range": {
                        "end": {
                            "character": 34,
                            "line": 9
                        },
                        "start": {
                            "character": 34,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/Luca/AppData/Local/Temp/tmpkwvpd7oq.cpp",
        "version": 239
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\Luca\AppData\Local\Temp\tmpkwvpd7oq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
