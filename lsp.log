Temporary file created: C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
LSP process started successfully.
Request sent with method initialize
Handling response from LSP
Received response: {
    "id": 0,
    "jsonrpc": "2.0",
    "result": {
        "capabilities": {
            "astProvider": true,
            "callHierarchyProvider": true,
            "clangdInlayHintsProvider": true,
            "codeActionProvider": true,
            "compilationDatabase": {
                "automaticReload": true
            },
            "completionProvider": {
                "resolveProvider": false,
                "triggerCharacters": [
                    ".",
                    "<",
                    ">",
                    ":",
                    "\"",
                    "/",
                    "*"
                ]
            },
            "declarationProvider": true,
            "definitionProvider": true,
            "documentFormattingProvider": true,
            "documentHighlightProvider": true,
            "documentLinkProvider": {
                "resolveProvider": false
            },
            "documentOnTypeFormattingProvider": {
                "firstTriggerCharacter": "\n",
                "moreTriggerCharacter": []
            },
            "documentRangeFormattingProvider": true,
            "documentSymbolProvider": true,
            "executeCommandProvider": {
                "commands": [
                    "clangd.applyFix",
                    "clangd.applyRename",
                    "clangd.applyTweak"
                ]
            },
            "foldingRangeProvider": true,
            "hoverProvider": true,
            "implementationProvider": true,
            "inactiveRegionsProvider": true,
            "inlayHintProvider": true,
            "memoryUsageProvider": true,
            "referencesProvider": true,
            "renameProvider": true,
            "selectionRangeProvider": true,
            "semanticTokensProvider": {
                "full": {
                    "delta": true
                },
                "legend": {
                    "tokenModifiers": [
                        "declaration",
                        "definition",
                        "deprecated",
                        "deduced",
                        "readonly",
                        "static",
                        "abstract",
                        "virtual",
                        "dependentName",
                        "defaultLibrary",
                        "usedAsMutableReference",
                        "usedAsMutablePointer",
                        "constructorOrDestructor",
                        "userDefined",
                        "functionScope",
                        "classScope",
                        "fileScope",
                        "globalScope"
                    ],
                    "tokenTypes": [
                        "variable",
                        "variable",
                        "parameter",
                        "function",
                        "method",
                        "function",
                        "property",
                        "variable",
                        "class",
                        "interface",
                        "enum",
                        "enumMember",
                        "type",
                        "type",
                        "unknown",
                        "namespace",
                        "typeParameter",
                        "concept",
                        "type",
                        "macro",
                        "modifier",
                        "operator",
                        "bracket",
                        "label",
                        "comment"
                    ]
                },
                "range": false
            },
            "signatureHelpProvider": {
                "triggerCharacters": [
                    "(",
                    ")",
                    "{",
                    "}",
                    "<",
                    ">",
                    ","
                ]
            },
            "standardTypeHierarchyProvider": true,
            "textDocumentSync": {
                "change": 2,
                "openClose": true,
                "save": true
            },
            "typeDefinitionProvider": true,
            "typeHierarchyProvider": true,
            "workspaceSymbolProvider": true
        },
        "serverInfo": {
            "name": "clangd",
            "version": "clangd version 20.1.0 windows x86_64-pc-windows-msvc"
        }
    }
}
LSP initialized successfully.
Request sent with method textDocument/didOpen
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 0
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 1
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 1
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 2
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 3
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "var1",
                "insertText": "var1",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " var1",
                "score": 1.7136412858963013,
                "sortText": "4024a767var1",
                "textEdit": {
                    "newText": "var1",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "var2",
                "insertText": "var2",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " var2",
                "score": 1.7136412858963013,
                "sortText": "4024a767var2",
                "textEdit": {
                    "newText": "var2",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 1.1264111995697021,
                "sortText": "406fd1c2error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4mbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_WCHAR_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_WCHAR_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_WCHAR_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.8596258163452148,
                "sortText": "40a3ef90cout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic",
                "textEdit": {
                    "newText": "atomic",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['var1', 'var2', 'std', 'error_code', 'main', 'mbstate_t', 'size_t', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'ATOMIC_WCHAR_T_LOCK_FREE', 'cout', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignas', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'constexpr', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'extern', 'false', 'float', 'goto', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'sizeof...', 'static', 'static_assert', 'static_cast', 'struct', 'thread_local', 'throw', 'true', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'using namespace', 'void', 'volatile', 'wchar_t', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'atomic', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 4
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt.h>"
                },
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022mbstate_t",
                "score": 1.7326606512069702,
                "sortText": "4022382dmbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "MB_LEN_MAX",
                "insertText": "MB_LEN_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MB_LEN_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebMB_LEN_MAX",
                "textEdit": {
                    "newText": "MB_LEN_MAX",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "MATH_ERREXCEPT",
                "insertText": "MATH_ERREXCEPT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MATH_ERREXCEPT",
                "score": 0.8436345458030701,
                "sortText": "40a80791MATH_ERREXCEPT",
                "textEdit": {
                    "newText": "MATH_ERREXCEPT",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "MATH_ERRNO",
                "insertText": "MATH_ERRNO",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MATH_ERRNO",
                "score": 0.8436345458030701,
                "sortText": "40a80791MATH_ERRNO",
                "textEdit": {
                    "newText": "MATH_ERRNO",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "MB_CUR_MAX",
                "insertText": "MB_CUR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MB_CUR_MAX",
                "score": 0.8436345458030701,
                "sortText": "40a80791MB_CUR_MAX",
                "textEdit": {
                    "newText": "MB_CUR_MAX",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "MCW_EM",
                "insertText": "MCW_EM",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MCW_EM",
                "score": 0.8436345458030701,
                "sortText": "40a80791MCW_EM",
                "textEdit": {
                    "newText": "MCW_EM",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "MCW_IC",
                "insertText": "MCW_IC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MCW_IC",
                "score": 0.8436345458030701,
                "sortText": "40a80791MCW_IC",
                "textEdit": {
                    "newText": "MCW_IC",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "MCW_PC",
                "insertText": "MCW_PC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MCW_PC",
                "score": 0.8436345458030701,
                "sortText": "40a80791MCW_PC",
                "textEdit": {
                    "newText": "MCW_PC",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "MCW_RC",
                "insertText": "MCW_RC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MCW_RC",
                "score": 0.8436345458030701,
                "sortText": "40a80791MCW_RC",
                "textEdit": {
                    "newText": "MCW_RC",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "math_errhandling",
                "insertText": "math_errhandling",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022math_errhandling",
                "score": 0.8436345458030701,
                "sortText": "40a80791math_errhandling",
                "textEdit": {
                    "newText": "math_errhandling",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "matherr",
                "insertText": "matherr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022matherr",
                "score": 0.8436345458030701,
                "sortText": "40a80791matherr",
                "textEdit": {
                    "newText": "matherr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_index_sequence",
                "insertText": "make_index_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_index_sequence<size_t Size>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3make_index_sequence",
                "textEdit": {
                    "newText": "make_index_sequence",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_integer_sequence",
                "insertText": "make_integer_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_integer_sequence<class Ty, Ty Size>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3make_integer_sequence",
                "textEdit": {
                    "newText": "make_integer_sequence",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <map>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <map>"
                },
                "filterText": "map",
                "insertText": "map",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022map<class Kty, class Ty, class Pr, class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3map",
                "textEdit": {
                    "newText": "map",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <valarray>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <valarray>"
                },
                "filterText": "mask_array",
                "insertText": "mask_array",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022mask_array<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3mask_array",
                "textEdit": {
                    "newText": "mask_array",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mersenne_twister_engine",
                "insertText": "mersenne_twister_engine",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022mersenne_twister_engine<class Ty, size_t Wx, size_t Nx, size_t Mx, size_t Rx, Ty Px, size_t Ux, Ty Dx, size_t Sx, Ty Bx, size_t Tx, Ty Cx, size_t Lx, Ty Fx>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3mersenne_twister_engine",
                "textEdit": {
                    "newText": "mersenne_twister_engine",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages",
                "insertText": "messages",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3messages",
                "textEdit": {
                    "newText": "messages",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_base",
                "insertText": "messages_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_base",
                "score": 0.8070572018623352,
                "sortText": "40b164b3messages_base",
                "textEdit": {
                    "newText": "messages_base",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_byname",
                "insertText": "messages_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_byname<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3messages_byname",
                "textEdit": {
                    "newText": "messages_byname",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "minstd_rand",
                "insertText": "minstd_rand",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022minstd_rand",
                "score": 0.8070572018623352,
                "sortText": "40b164b3minstd_rand",
                "textEdit": {
                    "newText": "minstd_rand",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "minstd_rand0",
                "insertText": "minstd_rand0",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022minstd_rand0",
                "score": 0.8070572018623352,
                "sortText": "40b164b3minstd_rand0",
                "textEdit": {
                    "newText": "minstd_rand0",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "minus",
                "insertText": "minus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022minus<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3minus",
                "textEdit": {
                    "newText": "minus",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "move_iterator",
                "insertText": "move_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022move_iterator<class Iter>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3move_iterator",
                "textEdit": {
                    "newText": "move_iterator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mt19937",
                "insertText": "mt19937",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022mt19937",
                "score": 0.8070572018623352,
                "sortText": "40b164b3mt19937",
                "textEdit": {
                    "newText": "mt19937",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mt19937_64",
                "insertText": "mt19937_64",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022mt19937_64",
                "score": 0.8070572018623352,
                "sortText": "40b164b3mt19937_64",
                "textEdit": {
                    "newText": "mt19937_64",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <map>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <map>"
                },
                "filterText": "multimap",
                "insertText": "multimap",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022multimap<class Kty, class Ty, class Pr, class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3multimap",
                "textEdit": {
                    "newText": "multimap",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "multiplies",
                "insertText": "multiplies",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022multiplies<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3multiplies",
                "textEdit": {
                    "newText": "multiplies",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <set>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <set>"
                },
                "filterText": "multiset",
                "insertText": "multiset",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022multiset<class Kty, class Pr, class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3multiset",
                "textEdit": {
                    "newText": "multiset",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "mutex",
                "insertText": "mutex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022mutex",
                "score": 0.8070572018623352,
                "sortText": "40b164b3mutex",
                "textEdit": {
                    "newText": "mutex",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "deprecated": true,
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mersenne_twister",
                "insertText": "mersenne_twister",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022mersenne_twister<class Ty, int Wx, int Nx, int Mx, int Rx, Ty Px, int Ux, int Sx, Ty Bx, int Tx, Ty Cx, int Lx>",
                "score": 0.678962767124176,
                "sortText": "40d22f7fmersenne_twister",
                "textEdit": {
                    "newText": "mersenne_twister",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "error_code",
                "filterText": "make_error_code",
                "insertText": "make_error_code",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_code(future_errc Ec)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_error_code",
                "textEdit": {
                    "newText": "make_error_code",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "error_condition",
                "filterText": "make_error_condition",
                "insertText": "make_error_condition",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_condition(future_errc Ec)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_error_condition",
                "textEdit": {
                    "newText": "make_error_condition",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "exception_ptr",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "make_exception_ptr",
                "insertText": "make_exception_ptr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_exception_ptr(Ex Except)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_exception_ptr",
                "textEdit": {
                    "newText": "make_exception_ptr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "make_heap",
                "insertText": "make_heap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_heap(RanIt First, RanIt Last, Pr Pred)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_heap",
                "textEdit": {
                    "newText": "make_heap",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "make_heap",
                "insertText": "make_heap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_heap(RanIt First, RanIt Last)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_heap",
                "textEdit": {
                    "newText": "make_heap",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_unique",
                "insertText": "make_unique",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_unique<class Ty>(Types &&...)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_unique",
                "textEdit": {
                    "newText": "make_unique",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "move_iterator<Iter>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_move_iterator",
                "insertText": "make_move_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_move_iterator(Iter It)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_move_iterator",
                "textEdit": {
                    "newText": "make_move_iterator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "pair<_Unrefwrap_t<Ty1>, _Unrefwrap_t<Ty2>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_pair",
                "insertText": "make_pair",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_pair(Ty1 &&Val1, Ty2 &&Val2)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_pair",
                "textEdit": {
                    "newText": "make_pair",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<BidIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_reverse_iterator",
                "insertText": "make_reverse_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_reverse_iterator(BidIt Iter)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_reverse_iterator",
                "textEdit": {
                    "newText": "make_reverse_iterator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_shared",
                "insertText": "make_shared",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_shared<class Ty>(Types &&Args...)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_shared",
                "textEdit": {
                    "newText": "make_shared",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "unique_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_unique",
                "insertText": "make_unique",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_unique<class Ty>(const size_t Size)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_unique",
                "textEdit": {
                    "newText": "make_unique",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "unique_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_unique",
                "insertText": "make_unique",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_unique<class Ty>(Types &&Args...)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_unique",
                "textEdit": {
                    "newText": "make_unique",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(const Ty &Left, const Ty &Right)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>, Pr)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(const Ty &Left, const Ty &Right, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "merge",
                "insertText": "merge",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022merge(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464merge",
                "textEdit": {
                    "newText": "merge",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "merge",
                "insertText": "merge",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022merge(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464merge",
                "textEdit": {
                    "newText": "merge",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(initializer_list<Ty>, Pr)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(const Ty &Left, const Ty &Right, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(const Ty &Left, const Ty &Right)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(initializer_list<Ty>)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min_element",
                "insertText": "min_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464min_element",
                "textEdit": {
                    "newText": "min_element",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min_element",
                "insertText": "min_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min_element(FwdIt First, FwdIt Last)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464min_element",
                "textEdit": {
                    "newText": "min_element",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "pair<Ty, Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "minmax",
                "insertText": "minmax",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022minmax(initializer_list<Ty> Ilist)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464minmax",
                "textEdit": {
                    "newText": "minmax",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "pair<InIt1, InIt2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "mismatch",
                "insertText": "mismatch",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mismatch(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464mismatch",
                "textEdit": {
                    "newText": "mismatch",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "move",
                "insertText": "move",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022move(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464move",
                "textEdit": {
                    "newText": "move",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "move_backward",
                "insertText": "move_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022move_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464move_backward",
                "textEdit": {
                    "newText": "move_backward",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memchr",
                "insertText": "memchr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memchr(const void *Buf, int Val, size_t MaxCount)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bmemchr",
                "textEdit": {
                    "newText": "memchr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memcmp",
                "insertText": "memcmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memcmp(const void *Buf1, const void *Buf2, size_t Size)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bmemcmp",
                "textEdit": {
                    "newText": "memcmp",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memcpy",
                "insertText": "memcpy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memcpy(void *Dst, const void *Src, size_t Size)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bmemcpy",
                "textEdit": {
                    "newText": "memcpy",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memmove",
                "insertText": "memmove",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memmove(void *Dst, const void *Src, size_t Size)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bmemmove",
                "textEdit": {
                    "newText": "memmove",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memset",
                "insertText": "memset",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memset(void *Dst, int Val, size_t Size)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bmemset",
                "textEdit": {
                    "newText": "memset",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modf",
                "insertText": "modf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022modf(long double Xx, long double *Yx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bmodf",
                "textEdit": {
                    "newText": "modf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modf",
                "insertText": "modf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022modf(float Xx, float *Yx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bmodf",
                "textEdit": {
                    "newText": "modf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "malloc",
                "insertText": "malloc",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022malloc(size_t Size)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbmalloc",
                "textEdit": {
                    "newText": "malloc",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "mblen",
                "insertText": "mblen",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mblen(const char *Ch, size_t MaxCount)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbmblen",
                "textEdit": {
                    "newText": "mblen",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "mbstowcs_s",
                "insertText": "mbstowcs_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mbstowcs_s(size_t *PtNumOfCharConverted, wchar_t *DstBuf, size_t SizeInWords, const char *SrcBuf, size_t MaxCount)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbmbstowcs_s",
                "textEdit": {
                    "newText": "mbstowcs_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "mbstowcs_s",
                "insertText": "mbstowcs_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mbstowcs_s(size_t *PtNumOfCharConverted, wchar_t (&Dest)[Size], const char *Source, size_t MaxCount)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbmbstowcs_s",
                "textEdit": {
                    "newText": "mbstowcs_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "mbtowc",
                "insertText": "mbtowc",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mbtowc(wchar_t *DstCh, const char *SrcCh, size_t SrcSizeInBytes)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbmbtowc",
                "textEdit": {
                    "newText": "mbtowc",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "time_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "mktime",
                "insertText": "mktime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mktime(struct tm *const Tm)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbmktime",
                "textEdit": {
                    "newText": "mktime",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modf",
                "insertText": "modf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022modf(double X, double *Y)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbmodf",
                "textEdit": {
                    "newText": "modf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modff",
                "insertText": "modff",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022modff(float X, float *Y)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbmodff",
                "textEdit": {
                    "newText": "modff",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modfl",
                "insertText": "modfl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022modfl(long double X, long double *Y)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbmodfl",
                "textEdit": {
                    "newText": "modfl",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "checked_array_iterator<Ptr>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_checked_array_iterator",
                "insertText": "stdext::make_checked_array_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stdext::make_checked_array_iterator(const Ptr Array, const size_t Size, const size_t Index = 0)",
                "score": 0.44196003675460815,
                "sortText": "411db76amake_checked_array_iterator",
                "textEdit": {
                    "newText": "stdext::make_checked_array_iterator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "unchecked_array_iterator<Ptr>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_unchecked_array_iterator",
                "insertText": "stdext::make_unchecked_array_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stdext::make_unchecked_array_iterator(const Ptr It)",
                "score": 0.44196003675460815,
                "sortText": "411db76amake_unchecked_array_iterator",
                "textEdit": {
                    "newText": "stdext::make_unchecked_array_iterator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "mbstowcs",
                "insertText": "mbstowcs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mbstowcs(wchar_t *Dest, const char *Source, size_t MaxCount)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35mbstowcs",
                "textEdit": {
                    "newText": "mbstowcs",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEMSGSIZE"
                },
                "filterText": "message_size",
                "insertText": "errc::message_size",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::message_size",
                "score": 0.3138078451156616,
                "sortText": "415f5494message_size",
                "textEdit": {
                    "newText": "errc::message_size",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_shared",
                "insertText": "tr1::make_shared",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::make_shared",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8make_shared",
                "textEdit": {
                    "newText": "tr1::make_shared",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mersenne_twister",
                "insertText": "tr1::mersenne_twister",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::mersenne_twister",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8mersenne_twister",
                "textEdit": {
                    "newText": "tr1::mersenne_twister",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mersenne_twister_engine",
                "insertText": "tr1::mersenne_twister_engine",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::mersenne_twister_engine",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8mersenne_twister_engine",
                "textEdit": {
                    "newText": "tr1::mersenne_twister_engine",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "minstd_rand",
                "insertText": "tr1::minstd_rand",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::minstd_rand",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8minstd_rand",
                "textEdit": {
                    "newText": "tr1::minstd_rand",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "minstd_rand0",
                "insertText": "tr1::minstd_rand0",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::minstd_rand0",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8minstd_rand0",
                "textEdit": {
                    "newText": "tr1::minstd_rand0",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mt19937",
                "insertText": "tr1::mt19937",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::mt19937",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8mt19937",
                "textEdit": {
                    "newText": "tr1::mt19937",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mt19937_64",
                "insertText": "tr1::mt19937_64",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::mt19937_64",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8mt19937_64",
                "textEdit": {
                    "newText": "tr1::mt19937_64",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "malloc",
                "insertText": "malloc",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022malloc",
                "score": 0.25286611914634705,
                "sortText": "417e8855malloc",
                "textEdit": {
                    "newText": "malloc",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "mblen",
                "insertText": "mblen",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022mblen",
                "score": 0.25286611914634705,
                "sortText": "417e8855mblen",
                "textEdit": {
                    "newText": "mblen",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "mbstowcs",
                "insertText": "mbstowcs",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022mbstowcs",
                "score": 0.25286611914634705,
                "sortText": "417e8855mbstowcs",
                "textEdit": {
                    "newText": "mbstowcs",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "mbtowc",
                "insertText": "mbtowc",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022mbtowc",
                "score": 0.25286611914634705,
                "sortText": "417e8855mbtowc",
                "textEdit": {
                    "newText": "mbtowc",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memchr",
                "insertText": "memchr",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022memchr",
                "score": 0.25286611914634705,
                "sortText": "417e8855memchr",
                "textEdit": {
                    "newText": "memchr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memcmp",
                "insertText": "memcmp",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022memcmp",
                "score": 0.25286611914634705,
                "sortText": "417e8855memcmp",
                "textEdit": {
                    "newText": "memcmp",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memcpy",
                "insertText": "memcpy",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022memcpy",
                "score": 0.25286611914634705,
                "sortText": "417e8855memcpy",
                "textEdit": {
                    "newText": "memcpy",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memmove",
                "insertText": "memmove",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022memmove",
                "score": 0.25286611914634705,
                "sortText": "417e8855memmove",
                "textEdit": {
                    "newText": "memmove",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memset",
                "insertText": "memset",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022memset",
                "score": 0.25286611914634705,
                "sortText": "417e8855memset",
                "textEdit": {
                    "newText": "memset",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "mktime",
                "insertText": "mktime",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022mktime",
                "score": 0.25286611914634705,
                "sortText": "417e8855mktime",
                "textEdit": {
                    "newText": "mktime",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modf",
                "insertText": "modf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022modf",
                "score": 0.25286611914634705,
                "sortText": "417e8855modf",
                "textEdit": {
                    "newText": "modf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modff",
                "insertText": "modff",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022modff",
                "score": 0.25286611914634705,
                "sortText": "417e8855modff",
                "textEdit": {
                    "newText": "modff",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['mbstate_t', 'main', 'MB_LEN_MAX', 'MATH_ERREXCEPT', 'MATH_ERRNO', 'MB_CUR_MAX', 'MCW_EM', 'MCW_IC', 'MCW_PC', 'MCW_RC', 'math_errhandling', 'matherr', 'make_index_sequence', 'make_integer_sequence', 'map', 'mask_array', 'mersenne_twister_engine', 'messages', 'messages_base', 'messages_byname', 'minstd_rand', 'minstd_rand0', 'minus', 'move_iterator', 'mt19937', 'mt19937_64', 'multimap', 'multiplies', 'multiset', 'mutex', 'mersenne_twister', 'make_error_code', 'make_error_condition', 'make_exception_ptr', 'make_heap', 'make_heap', 'make_unique', 'make_move_iterator', 'make_pair', 'make_reverse_iterator', 'make_shared', 'make_unique', 'make_unique', 'max', 'max', 'max', 'max', 'max_element', 'max_element', 'merge', 'merge', 'min', 'min', 'min', 'min', 'min_element', 'min_element', 'minmax', 'mismatch', 'move', 'move_backward', 'memchr', 'memcmp', 'memcpy', 'memmove', 'memset', 'modf', 'modf', 'malloc', 'mblen', 'mbstowcs_s', 'mbstowcs_s', 'mbtowc', 'mktime', 'modf', 'modff', 'modfl', 'stdext::make_checked_array_iterator', 'stdext::make_unchecked_array_iterator', 'mbstowcs', 'errc::message_size', 'tr1::make_shared', 'tr1::mersenne_twister', 'tr1::mersenne_twister_engine', 'tr1::minstd_rand', 'tr1::minstd_rand0', 'tr1::mt19937', 'tr1::mt19937_64', 'malloc', 'mblen', 'mbstowcs', 'mbtowc', 'memchr', 'memcmp', 'memcpy', 'memmove', 'memset', 'mktime', 'modf', 'modff']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "math_errhandling",
                "insertText": "math_errhandling",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022math_errhandling",
                "score": 0.8436345458030701,
                "sortText": "40a80791math_errhandling",
                "textEdit": {
                    "newText": "math_errhandling",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "matherr",
                "insertText": "matherr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022matherr",
                "score": 0.8436345458030701,
                "sortText": "40a80791matherr",
                "textEdit": {
                    "newText": "matherr",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_index_sequence",
                "insertText": "make_index_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_index_sequence<size_t Size>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3make_index_sequence",
                "textEdit": {
                    "newText": "make_index_sequence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_integer_sequence",
                "insertText": "make_integer_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_integer_sequence<class Ty, Ty Size>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3make_integer_sequence",
                "textEdit": {
                    "newText": "make_integer_sequence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_signed",
                "insertText": "make_signed",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022make_signed<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3make_signed",
                "textEdit": {
                    "newText": "make_signed",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_signed_t",
                "insertText": "make_signed_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_signed_t<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3make_signed_t",
                "textEdit": {
                    "newText": "make_signed_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_unsigned",
                "insertText": "make_unsigned",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022make_unsigned<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3make_unsigned",
                "textEdit": {
                    "newText": "make_unsigned",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_unsigned_t",
                "insertText": "make_unsigned_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_unsigned_t<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3make_unsigned_t",
                "textEdit": {
                    "newText": "make_unsigned_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <map>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <map>"
                },
                "filterText": "map",
                "insertText": "map",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022map<class Kty, class Ty, class Pr, class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3map",
                "textEdit": {
                    "newText": "map",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <valarray>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <valarray>"
                },
                "filterText": "mask_array",
                "insertText": "mask_array",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022mask_array<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3mask_array",
                "textEdit": {
                    "newText": "mask_array",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_results",
                "insertText": "match_results",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022match_results<class BidIt, class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3match_results",
                "textEdit": {
                    "newText": "match_results",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstddef>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstddef>"
                },
                "filterText": "max_align_t",
                "insertText": "max_align_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022max_align_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3max_align_t",
                "textEdit": {
                    "newText": "max_align_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "MATH_ERREXCEPT",
                "insertText": "MATH_ERREXCEPT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MATH_ERREXCEPT",
                "score": 0.8436345458030701,
                "sortText": "40c3069fMATH_ERREXCEPT",
                "textEdit": {
                    "newText": "MATH_ERREXCEPT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "MATH_ERRNO",
                "insertText": "MATH_ERRNO",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MATH_ERRNO",
                "score": 0.8436345458030701,
                "sortText": "40c3069fMATH_ERRNO",
                "textEdit": {
                    "newText": "MATH_ERRNO",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_flag_type",
                "insertText": "regex_constants::match_flag_type",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_flag_type",
                "score": 0.6575543284416199,
                "sortText": "40d7aa85match_flag_type",
                "textEdit": {
                    "newText": "regex_constants::match_flag_type",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "error_code",
                "filterText": "make_error_code",
                "insertText": "make_error_code",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_code(io_errc Ec)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_error_code",
                "textEdit": {
                    "newText": "make_error_code",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "error_code",
                "filterText": "make_error_code",
                "insertText": "make_error_code",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_code(future_errc Ec)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_error_code",
                "textEdit": {
                    "newText": "make_error_code",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "error_code",
                "filterText": "make_error_code",
                "insertText": "make_error_code",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_code(errc Ec)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_error_code",
                "textEdit": {
                    "newText": "make_error_code",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "error_condition",
                "filterText": "make_error_condition",
                "insertText": "make_error_condition",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_condition(future_errc Ec)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_error_condition",
                "textEdit": {
                    "newText": "make_error_condition",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "error_condition",
                "filterText": "make_error_condition",
                "insertText": "make_error_condition",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_condition(errc Ec)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_error_condition",
                "textEdit": {
                    "newText": "make_error_condition",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "error_condition",
                "filterText": "make_error_condition",
                "insertText": "make_error_condition",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_condition(io_errc Ec)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_error_condition",
                "textEdit": {
                    "newText": "make_error_condition",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "exception_ptr",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "make_exception_ptr",
                "insertText": "make_exception_ptr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_exception_ptr(Ex Except)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_exception_ptr",
                "textEdit": {
                    "newText": "make_exception_ptr",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "make_heap",
                "insertText": "make_heap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_heap(RanIt First, RanIt Last, Pr Pred)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_heap",
                "textEdit": {
                    "newText": "make_heap",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "make_heap",
                "insertText": "make_heap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_heap(RanIt First, RanIt Last)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_heap",
                "textEdit": {
                    "newText": "make_heap",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_unique",
                "insertText": "make_unique",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_unique<class Ty>(Types &&...)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddmake_unique",
                "textEdit": {
                    "newText": "make_unique",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "move_iterator<Iter>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_move_iterator",
                "insertText": "make_move_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_move_iterator(Iter It)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_move_iterator",
                "textEdit": {
                    "newText": "make_move_iterator",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "pair<_Unrefwrap_t<Ty1>, _Unrefwrap_t<Ty2>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_pair",
                "insertText": "make_pair",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_pair(Ty1 &&Val1, Ty2 &&Val2)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_pair",
                "textEdit": {
                    "newText": "make_pair",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<BidIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_reverse_iterator",
                "insertText": "make_reverse_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_reverse_iterator(BidIt Iter)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_reverse_iterator",
                "textEdit": {
                    "newText": "make_reverse_iterator",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_shared",
                "insertText": "make_shared",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_shared<class Ty>(Types &&Args...)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_shared",
                "textEdit": {
                    "newText": "make_shared",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <tuple>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "tuple<_Unrefwrap_t<Types>...>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <tuple>"
                },
                "filterText": "make_tuple",
                "insertText": "make_tuple",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_tuple(Types &&Args...)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_tuple",
                "textEdit": {
                    "newText": "make_tuple",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "unique_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_unique",
                "insertText": "make_unique",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_unique<class Ty>(Types &&Args...)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_unique",
                "textEdit": {
                    "newText": "make_unique",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "unique_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_unique",
                "insertText": "make_unique",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_unique<class Ty>(const size_t Size)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464make_unique",
                "textEdit": {
                    "newText": "make_unique",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(const Ty &Left, const Ty &Right)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>, Pr)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(const Ty &Left, const Ty &Right, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstddef>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstddef>"
                },
                "filterText": "max_align_t",
                "insertText": "max_align_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022max_align_t",
                "score": 0.5702864527702332,
                "sortText": "40ee01b5max_align_t",
                "textEdit": {
                    "newText": "max_align_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "malloc",
                "insertText": "malloc",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022malloc(size_t Size)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbmalloc",
                "textEdit": {
                    "newText": "malloc",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "checked_array_iterator<Ptr>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_checked_array_iterator",
                "insertText": "stdext::make_checked_array_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stdext::make_checked_array_iterator(const Ptr Array, const size_t Size, const size_t Index = 0)",
                "score": 0.44196003675460815,
                "sortText": "411db76amake_checked_array_iterator",
                "textEdit": {
                    "newText": "stdext::make_checked_array_iterator",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "unchecked_array_iterator<Ptr>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_unchecked_array_iterator",
                "insertText": "stdext::make_unchecked_array_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stdext::make_unchecked_array_iterator(const Ptr It)",
                "score": 0.44196003675460815,
                "sortText": "411db76amake_unchecked_array_iterator",
                "textEdit": {
                    "newText": "stdext::make_unchecked_array_iterator",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_any",
                "insertText": "regex_constants::match_any",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_any",
                "score": 0.3138078451156616,
                "sortText": "415f5494match_any",
                "textEdit": {
                    "newText": "regex_constants::match_any",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_continuous",
                "insertText": "regex_constants::match_continuous",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_continuous",
                "score": 0.3138078451156616,
                "sortText": "415f5494match_continuous",
                "textEdit": {
                    "newText": "regex_constants::match_continuous",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_default",
                "insertText": "regex_constants::match_default",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_default",
                "score": 0.3138078451156616,
                "sortText": "415f5494match_default",
                "textEdit": {
                    "newText": "regex_constants::match_default",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_not_bol",
                "insertText": "regex_constants::match_not_bol",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_not_bol",
                "score": 0.3138078451156616,
                "sortText": "415f5494match_not_bol",
                "textEdit": {
                    "newText": "regex_constants::match_not_bol",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_not_bow",
                "insertText": "regex_constants::match_not_bow",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_not_bow",
                "score": 0.3138078451156616,
                "sortText": "415f5494match_not_bow",
                "textEdit": {
                    "newText": "regex_constants::match_not_bow",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_not_eol",
                "insertText": "regex_constants::match_not_eol",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_not_eol",
                "score": 0.3138078451156616,
                "sortText": "415f5494match_not_eol",
                "textEdit": {
                    "newText": "regex_constants::match_not_eol",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_not_eow",
                "insertText": "regex_constants::match_not_eow",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_not_eow",
                "score": 0.3138078451156616,
                "sortText": "415f5494match_not_eow",
                "textEdit": {
                    "newText": "regex_constants::match_not_eow",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_not_null",
                "insertText": "regex_constants::match_not_null",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_not_null",
                "score": 0.3138078451156616,
                "sortText": "415f5494match_not_null",
                "textEdit": {
                    "newText": "regex_constants::match_not_null",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_prev_avail",
                "insertText": "regex_constants::match_prev_avail",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_prev_avail",
                "score": 0.3138078451156616,
                "sortText": "415f5494match_prev_avail",
                "textEdit": {
                    "newText": "regex_constants::match_prev_avail",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "csub_match",
                "insertText": "csub_match",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022csub_match",
                "score": 0.8070572018623352,
                "sortText": "41650b86csub_match",
                "textEdit": {
                    "newText": "csub_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "ssub_match",
                "insertText": "ssub_match",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ssub_match",
                "score": 0.8070572018623352,
                "sortText": "41650b86ssub_match",
                "textEdit": {
                    "newText": "ssub_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "sub_match",
                "insertText": "sub_match",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022sub_match<class BidIt>",
                "score": 0.8070572018623352,
                "sortText": "41650b86sub_match",
                "textEdit": {
                    "newText": "sub_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <unordered_map>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <unordered_map>"
                },
                "filterText": "unordered_map",
                "insertText": "unordered_map",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022unordered_map<class Kty, class Ty, class Hasher, class Keyeq, class Alloc>",
                "score": 0.8070572018623352,
                "sortText": "41650b86unordered_map",
                "textEdit": {
                    "newText": "unordered_map",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "wcsub_match",
                "insertText": "wcsub_match",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wcsub_match",
                "score": 0.8070572018623352,
                "sortText": "41650b86wcsub_match",
                "textEdit": {
                    "newText": "wcsub_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "wssub_match",
                "insertText": "wssub_match",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wssub_match",
                "score": 0.8070572018623352,
                "sortText": "41650b86wssub_match",
                "textEdit": {
                    "newText": "wssub_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::experimental::filesystem::perms",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "mask",
                "insertText": "experimental::filesystem::perms::mask",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::perms::mask",
                "score": 0.2961350679397583,
                "sortText": "416860fcmask",
                "textEdit": {
                    "newText": "experimental::filesystem::perms::mask",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstddef>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstddef>"
                },
                "filterText": "max_align_t",
                "insertText": "max_align_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022max_align_t",
                "score": 0.2774735689163208,
                "sortText": "4171eefcmax_align_t",
                "textEdit": {
                    "newText": "max_align_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_shared",
                "insertText": "tr1::make_shared",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::make_shared",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8make_shared",
                "textEdit": {
                    "newText": "tr1::make_shared",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_signed",
                "insertText": "tr1::make_signed",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::make_signed",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8make_signed",
                "textEdit": {
                    "newText": "tr1::make_signed",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <tuple>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <tuple>"
                },
                "filterText": "make_tuple",
                "insertText": "tr1::make_tuple",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::make_tuple",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8make_tuple",
                "textEdit": {
                    "newText": "tr1::make_tuple",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_unsigned",
                "insertText": "tr1::make_unsigned",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::make_unsigned",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8make_unsigned",
                "textEdit": {
                    "newText": "tr1::make_unsigned",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_results",
                "insertText": "tr1::match_results",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::match_results",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8match_results",
                "textEdit": {
                    "newText": "tr1::match_results",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "malloc",
                "insertText": "malloc",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022malloc",
                "score": 0.25286611914634705,
                "sortText": "417e8855malloc",
                "textEdit": {
                    "newText": "malloc",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(const Elem *Str, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.5893728137016296,
                "sortText": "419dae4cregex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(BidIt First, BidIt Last, match_results<BidIt, Alloc> &Matches, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.5893728137016296,
                "sortText": "419dae4cregex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(const basic_string<Elem, StTraits, StAlloc> &Str, match_results<typename basic_string<Elem, StTraits, StAlloc>::const_iterator, Alloc> &Matches, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.5893728137016296,
                "sortText": "419dae4cregex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(const Elem *Str, match_results<const Elem *, Alloc> &Matches, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.5893728137016296,
                "sortText": "419dae4cregex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(BidIt First, BidIt Last, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.5893728137016296,
                "sortText": "419dae4cregex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(const basic_string<Elem, StTraits, StAlloc> &Str, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.5893728137016296,
                "sortText": "419dae4cregex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(const basic_string<Elem, StTraits, StAlloc> &&, match_results<typename basic_string<Elem, StTraits, StAlloc>::const_iterator, Alloc> &, const basic_regex<Elem, RxTraits> &, regex_constants::match_flag_type = regex_constants::match_default)",
                "score": 0.5893728137016296,
                "sortText": "419dae4cregex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_makepath_s",
                "insertText": "_makepath_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_makepath_s(char (&Buffer)[Size], const char *Drive, const char *Dir, const char *Filename, const char *Ext)",
                "score": 0.4419805109500885,
                "sortText": "41d6478c_makepath_s",
                "textEdit": {
                    "newText": "_makepath_s",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_makepath_s",
                "insertText": "_makepath_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_makepath_s(char *Buffer, size_t BufferCount, const char *Drive, const char *Dir, const char *Filename, const char *Ext)",
                "score": 0.4419805109500885,
                "sortText": "41d6478c_makepath_s",
                "textEdit": {
                    "newText": "_makepath_s",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_malloc.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_malloc.h>"
                },
                "filterText": "_malloc_base",
                "insertText": "_malloc_base",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_malloc_base(size_t Size)",
                "score": 0.4419805109500885,
                "sortText": "41d6478c_malloc_base",
                "textEdit": {
                    "newText": "_malloc_base",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "_matherr",
                "insertText": "_matherr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_matherr(struct _exception *Except)",
                "score": 0.4419805109500885,
                "sortText": "41d6478c_matherr",
                "textEdit": {
                    "newText": "_matherr",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_makepath",
                "insertText": "_makepath",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_makepath(char *Buffer, const char *Drive, const char *Dir, const char *Filename, const char *Ext)",
                "score": 0.3469603955745697,
                "sortText": "41fac468_makepath",
                "textEdit": {
                    "newText": "_makepath",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEMFILE"
                },
                "filterText": "too_many_files_open",
                "insertText": "errc::too_many_files_open",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::too_many_files_open",
                "score": 0.3138078451156616,
                "sortText": "420efedetoo_many_files_open",
                "textEdit": {
                    "newText": "errc::too_many_files_open",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENFILE"
                },
                "filterText": "too_many_files_open_in_system",
                "insertText": "errc::too_many_files_open_in_system",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::too_many_files_open_in_system",
                "score": 0.3138078451156616,
                "sortText": "420efedetoo_many_files_open_in_system",
                "textEdit": {
                    "newText": "errc::too_many_files_open_in_system",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEMLINK"
                },
                "filterText": "too_many_links",
                "insertText": "errc::too_many_links",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::too_many_links",
                "score": 0.3138078451156616,
                "sortText": "420efedetoo_many_links",
                "textEdit": {
                    "newText": "errc::too_many_links",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nELOOP"
                },
                "filterText": "too_many_symbolic_link_levels",
                "insertText": "errc::too_many_symbolic_link_levels",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::too_many_symbolic_link_levels",
                "score": 0.3138078451156616,
                "sortText": "420efedetoo_many_symbolic_link_levels",
                "textEdit": {
                    "newText": "errc::too_many_symbolic_link_levels",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "csub_match",
                "insertText": "tr1::csub_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::csub_match",
                "score": 0.2698061466217041,
                "sortText": "4230c9f4csub_match",
                "textEdit": {
                    "newText": "tr1::csub_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "tr1::regex_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::regex_match",
                "score": 0.2698061466217041,
                "sortText": "4230c9f4regex_match",
                "textEdit": {
                    "newText": "tr1::regex_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "ssub_match",
                "insertText": "tr1::ssub_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::ssub_match",
                "score": 0.2698061466217041,
                "sortText": "4230c9f4ssub_match",
                "textEdit": {
                    "newText": "tr1::ssub_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "sub_match",
                "insertText": "tr1::sub_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::sub_match",
                "score": 0.2698061466217041,
                "sortText": "4230c9f4sub_match",
                "textEdit": {
                    "newText": "tr1::sub_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <unordered_map>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <unordered_map>"
                },
                "filterText": "unordered_map",
                "insertText": "tr1::unordered_map",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::unordered_map",
                "score": 0.2698061466217041,
                "sortText": "4230c9f4unordered_map",
                "textEdit": {
                    "newText": "tr1::unordered_map",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "wcsub_match",
                "insertText": "tr1::wcsub_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::wcsub_match",
                "score": 0.2698061466217041,
                "sortText": "4230c9f4wcsub_match",
                "textEdit": {
                    "newText": "tr1::wcsub_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "wssub_match",
                "insertText": "tr1::wssub_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::wssub_match",
                "score": 0.2698061466217041,
                "sortText": "4230c9f4wssub_match",
                "textEdit": {
                    "newText": "tr1::wssub_match",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['main', 'math_errhandling', 'matherr', 'make_index_sequence', 'make_integer_sequence', 'make_signed', 'make_signed_t', 'make_unsigned', 'make_unsigned_t', 'map', 'mask_array', 'match_results', 'max_align_t', 'MATH_ERREXCEPT', 'MATH_ERRNO', 'regex_constants::match_flag_type', 'make_error_code', 'make_error_code', 'make_error_code', 'make_error_condition', 'make_error_condition', 'make_error_condition', 'make_exception_ptr', 'make_heap', 'make_heap', 'make_unique', 'make_move_iterator', 'make_pair', 'make_reverse_iterator', 'make_shared', 'make_tuple', 'make_unique', 'make_unique', 'max', 'max', 'max', 'max', 'max_element', 'max_element', 'max_align_t', 'malloc', 'stdext::make_checked_array_iterator', 'stdext::make_unchecked_array_iterator', 'regex_constants::match_any', 'regex_constants::match_continuous', 'regex_constants::match_default', 'regex_constants::match_not_bol', 'regex_constants::match_not_bow', 'regex_constants::match_not_eol', 'regex_constants::match_not_eow', 'regex_constants::match_not_null', 'regex_constants::match_prev_avail', 'csub_match', 'ssub_match', 'sub_match', 'unordered_map', 'wcsub_match', 'wssub_match', 'experimental::filesystem::perms::mask', 'max_align_t', 'tr1::make_shared', 'tr1::make_signed', 'tr1::make_tuple', 'tr1::make_unsigned', 'tr1::match_results', 'malloc', 'regex_match', 'regex_match', 'regex_match', 'regex_match', 'regex_match', 'regex_match', 'regex_match', '_makepath_s', '_makepath_s', '_malloc_base', '_matherr', '_makepath', 'errc::too_many_files_open', 'errc::too_many_files_open_in_system', 'errc::too_many_links', 'errc::too_many_symbolic_link_levels', 'tr1::csub_match', 'tr1::regex_match', 'tr1::ssub_match', 'tr1::sub_match', 'tr1::unordered_map', 'tr1::wcsub_match', 'tr1::wssub_match']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_index_sequence",
                "insertText": "make_index_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_index_sequence<size_t Size>",
                "score": 0.8070572018623352,
                "sortText": "40d3d3eamake_index_sequence",
                "textEdit": {
                    "newText": "make_index_sequence",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_integer_sequence",
                "insertText": "make_integer_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_integer_sequence<class Ty, Ty Size>",
                "score": 0.8070572018623352,
                "sortText": "40d3d3eamake_integer_sequence",
                "textEdit": {
                    "newText": "make_integer_sequence",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['main', 'make_index_sequence', 'make_integer_sequence']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'ma'",
                "range": {
                    "end": {
                        "character": 11,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 6
    }
}
Diagnostics received from LSP.
Errors received: [[10, [9, 11]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 11
                    },
                    "start": {
                        "character": 9,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'mai'",
                "range": {
                    "end": {
                        "character": 12,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 7
    }
}
Diagnostics received from LSP.
Errors received: [[11, [9, 15]], [10, [9, 12]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "3ffedfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_index_sequence",
                "insertText": "make_index_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_index_sequence<size_t Size>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dmake_index_sequence",
                "textEdit": {
                    "newText": "make_index_sequence",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 2
                            },
                            "start": {
                                "character": 0,
                                "line": 2
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_integer_sequence",
                "insertText": "make_integer_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_integer_sequence<class Ty, Ty Size>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dmake_integer_sequence",
                "textEdit": {
                    "newText": "make_integer_sequence",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 10
                        },
                        "start": {
                            "character": 9,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['main', 'make_index_sequence', 'make_integer_sequence']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 11
                    },
                    "start": {
                        "character": 9,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 13,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 8
    }
}
Diagnostics received from LSP.
Errors received: [[11, [9, 15]]]
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "variable var1\n\nType: int\n\nint var1"
        },
        "range": {
            "end": {
                "character": 19,
                "line": 9
            },
            "start": {
                "character": 15,
                "line": 9
            }
        }
    }
}
Received hover response.
Hover text: variable var1

Type: int

int var1
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'main1'; did you mean 'main'? (fix available)\n\ntmp0t72ji95.cpp:8:5: note: 'main' declared here",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "'main' declared here\n\ntmp0t72ji95.cpp:11:10: error: use of undeclared identifier 'main1'; did you mean 'main'?",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 7
                    },
                    "start": {
                        "character": 4,
                        "line": 7
                    }
                },
                "severity": 3
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 11
                    },
                    "start": {
                        "character": 9,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 9
    }
}
Diagnostics received from LSP.
Errors received: [[10, [9, 14]], [11, [9, 15]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'main1l'; did you mean 'main'? (fix available)\n\ntmp0t72ji95.cpp:8:5: note: 'main' declared here",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "'main' declared here\n\ntmp0t72ji95.cpp:11:10: error: use of undeclared identifier 'main1l'; did you mean 'main'?",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 7
                    },
                    "start": {
                        "character": 4,
                        "line": 7
                    }
                },
                "severity": 3
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 11
                    },
                    "start": {
                        "character": 9,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 10
    }
}
Diagnostics received from LSP.
Errors received: [[10, [9, 15]], [11, [9, 15]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'main1'; did you mean 'main'? (fix available)\n\ntmp0t72ji95.cpp:8:5: note: 'main' declared here",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "'main' declared here\n\ntmp0t72ji95.cpp:11:10: error: use of undeclared identifier 'main1'; did you mean 'main'?",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 7
                    },
                    "start": {
                        "character": 4,
                        "line": 7
                    }
                },
                "severity": 3
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 11
                    },
                    "start": {
                        "character": 9,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 11
    }
}
Diagnostics received from LSP.
Errors received: [[10, [9, 14]], [11, [9, 15]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'main1'; did you mean 'main'? (fix available)\n\ntmp0t72ji95.cpp:8:5: note: 'main' declared here",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "'main' declared here\n\ntmp0t72ji95.cpp:11:10: error: use of undeclared identifier 'main1'; did you mean 'main'?",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 7
                    },
                    "start": {
                        "character": 4,
                        "line": 7
                    }
                },
                "severity": 3
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 13
    }
}
Diagnostics received from LSP.
Errors received: [[10, [9, 14]]]
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "variable var1\n\nType: int\n\nint var1"
        },
        "range": {
            "end": {
                "character": 19,
                "line": 9
            },
            "start": {
                "character": 15,
                "line": 9
            }
        }
    }
}
Received hover response.
Hover text: variable var1

Type: int

int var1
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 13,
                        "line": 10
                    },
                    "start": {
                        "character": 9,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp0t72ji95.cpp",
        "version": 20
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp0t72ji95.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "function main\n\n\u2192 int\n\nint main()"
        },
        "range": {
            "end": {
                "character": 13,
                "line": 10
            },
            "start": {
                "character": 9,
                "line": 10
            }
        }
    }
}
Received hover response.
Hover text: function main

\u2192 int

int main()
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "function main\n\n\u2192 int\n\nint main()"
        },
        "range": {
            "end": {
                "character": 13,
                "line": 10
            },
            "start": {
                "character": 9,
                "line": 10
            }
        }
    }
}
Received hover response.
Hover text: function main

\u2192 int

int main()
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "function main\n\n\u2192 int\n\nint main()"
        },
        "range": {
            "end": {
                "character": 13,
                "line": 10
            },
            "start": {
                "character": 9,
                "line": 10
            }
        }
    }
}
Received hover response.
Hover text: function main

\u2192 int

int main()
